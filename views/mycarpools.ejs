<!DOCTYPE html>
<html lang="en" id="head">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <meta http-equiv="X-UA-Compatible" content="ie=edge">
   <title>EPCarpool</title>
   <link href="./bulma.min.css" rel="stylesheet" type="text/css" />
   <link href="./style.css" rel="stylesheet" type="text/css" />
   <script src="https://kit.fontawesome.com/16ae8e710d.js" crossorigin="anonymous"></script>
   <link rel="icon" href="favicon.png" type="image/x-icon">
   <meta charset="UTF-8">
   <style>
   /* Tooltip styling */
   [data-tooltip] {
      position: relative;
      cursor: help;
   }
   
   [data-tooltip]:hover::after {
      content: attr(data-tooltip);
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background: #333;
      color: white;
      padding: 0.5rem 0.75rem;
      border-radius: 4px;
      font-size: 0.8rem;
      white-space: nowrap;
      z-index: 1000;
      pointer-events: none;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.2s, visibility 0.2s;
   }
   
   [data-tooltip]:hover::before {
      content: '';
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%) translateY(8px);
      border: 5px solid transparent;
      border-top-color: #333;
      z-index: 1001;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.2s, visibility 0.2s, transform 0.2s;
   }
   
   [data-tooltip]:hover::after,
   [data-tooltip]:hover::before {
      opacity: 1;
      visibility: visible;
   }
   
   [data-tooltip]:hover::before {
      transform: translateX(-50%) translateY(-2px);
   }
   
   /* CO2 savings container hover effect */
   .co2-savings-container {
      transition: all 0.3s ease;
   }
   
   .co2-savings-container:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1) !important;
   }
   </style>
   <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
   <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
      integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
   <main>
      <!--Error header-->
      <% if (error) { %>
         <article class="message is-danger" id="error">
            <div class="message-header">
               <p>Warning</p>
               <button class="delete" aria-label="delete" onclick="const errorElement = document.getElementById('error');
                errorElement.remove();"></button>
            </div>
            <div class="message-body">
               <%= error %>
            </div>
         </article>
         <% } %>

            <% if (message) { %>
               <article class="message is-success" id="error">
                  <div class="message-header">
                     <p>Success</p>
                     <button class="delete" aria-label="delete" onclick="const successElement = document.getElementById('error');
                  successElement.remove();"></button>
                  </div>
                  <div class="message-body">
                     <%= message %>
                  </div>
               </article>
               <% } %>
                  <section class="hero is-fullheight" id="hero">
                     <!-- Hero head: will stick at the top -->
                     <div class="hero-head">
                        <header class="navbar">
                           <div class="container">
                              <div class="navbar-brand">
                                 <a class="navbar-item">
                                    <div style="position: relative; display: flex; align-items: center;">
                                       <img src="EPS Logo - Transparent-4.png" alt="Logo">
                                       <h1 class="title is-3" style="margin-left: 10px; margin-bottom: -10px">EPCarpool
                                       </h1>
                                       <span
                                          style="position: absolute; top: -5px; right: -25px; background: #3273DC; color: white; padding: 2px 6px; border-radius: 4px; font-size: 0.7em; font-weight: bold;">BETA</span>
                                    </div>
                                 </a>
                                 <div class="navbar-item" style="padding: 0.5rem 1.25rem;">
                                    <button class="button is-info is-light" onclick="showDisclaimer()">
                                       <span class="icon">
                                          <i class="fas fa-info-circle"></i>
                                       </span>
                                    </button>
                                 </div>
                                 <span class="navbar-burger" data-target="navbarMenuHeroC" id="nav-toggle">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                 </span>
                              </div>
                              <div id="navbarMenuHeroC" class="navbar-menu ">
                                 <div class="navbar-end">
                                    <div class="is-button is-link">
                                       <div class="navbar-item">
                                          <span style="font-size: 1em; color: #30B700; float: right">
                                             <a class="fa-solid fa-leaf" href="/sustainabilityStatement"
                                                style="color: #30B700"></a>
                                          </span>
                                          <div class="buttons" style="margin: 10px;margin-right: 0px;">
                                             <a class="button is-link is-outlined " href="/logout">
                                                Log out
                                             </a>
                                             <div class="navbar-item has-dropdown is-hoverable "
                                                onclick="document.getElementById('navbar-dropdown').style.visibility = 'visible';">
                                                <a class="button is-link" id="name_button"
                                                   style="background: linear-gradient(105deg, #3273DC, #275CBF);">
                                                   <%= firstName %>
                                                      <%= lastName %>
                                                         <i style="margin-left: 5px;" class="fas fa-angle-down"
                                                            aria-hidden="true"></i>
                                                </a>
                                                <div id="filler"
                                                   style="width: 130px; background-color: transparent; height: 20px; position: absolute; margin-top: -15px;">
                                                </div>
                                                <div class="navbar-dropdown" id="navbar-dropdown">
                                                   <a class="navbar-item" href="/updateSettings">
                                                      Update settings
                                                   </a>
                                                   <a class="navbar-item" href="https://forms.office.com/r/deCSjA7bCR">
                                                      Report a bug
                                                   </a>
                                                   <a class="navbar-item" href="/sustainabilityStatement">
                                                      Sustainability statement
                                                   </a>
                                                   <hr class="navbar-divider">
                                                   <div class="navbar-item">
                                                      Version <%= process.env.VERSION %>
                                                   </div>
                                                </div>
                                             </div>
                                             </nav>
                                          </div>
                                       </div>
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </header>
                     </div>
                     <!-- Hero content: will be in the middle -->
                     <div class="hero-body" id="hero-body">
                        <div>
                           <!-- <div class="container has-text-centered"> -->
                           <!-- <p class="title">
                     Title
                     </p>
                     <p class="subtitle">
                     Subtitle
                     </p> -->
                           <!-- <div class="wrapper" style="margin-top:-30px; margin-bottom: 30px; ">
                     <div class="container-calendar" >
                       <div id="left" style="margin-right: 15px;">
                          <h1>Calendar</h1>
                           <div id="event-section">
                               <h3>Add Event</h3>
                             <input type="date" id="eventDate">
                             <input type="time" id="eventTime">
                               <input type="text"
                                   id="eventTitle"
                                   placeholder="Event Title">
                               <input type="text"
                                   id="eventDescription"
                                   placeholder="Location">
                               <button id="addEvent" onclick="addEvent()">
                                   Add
                               </button> 
                           </div>
                           <div id="reminder-section">
                               <h3>Reminders</h3>
                               <!-- List to display reminders -->
                           <!--<div  type="button" style="font-size: 15px; margin-top: 10px; background-color: #eee; border-radius: 0px; padding-top: 5px; padding-bottom: 5px;" class="collapsible" id="collapsible1">My carpools<i style="margin-left: 5px;" class="fa-solid fa-angle-right" id="carpools-caret"></i></div>
                     <div class="content" style="display: none;">
                     
                     
                       <ul id="reminderList">
                     
                           <li data-event-id="1">
                               <strong>Event Title</strong>
                               - Event Description on Event Date
                               <button class="delete-event"
                                   onclick="deleteEvent(1)">
                                   Delete
                               </button>
                           </li>
                       </ul>
                        </div>
                     </div>
                     </div>
                     <div id="right">
                     <h3 id="monthAndYear"></h3>
                     <div class="button-container-calendar">
                       <button id="previous"
                               onclick="previous()">
                             ‹
                         </button>
                       <button id="next"
                               onclick="next()">
                             ›
                         </button>
                     </div>
                     <table class="table-calendar"
                          id="calendar"
                          data-lang="en">
                       <thead id="thead-month"></thead>
                       <!-- Table body for displaying the calendar -->
                           <!--<tbody id="calendar-body"></tbody>
                     </table>
                     <div class="footer-container-calendar">
                         <label for="month">Jump To: </label>
                         <!-- Dropdowns to select a specific month and year -->
                           <!--<select id="month" onchange="jump()">
                     <option value=0>Jan</option>
                     <option value=1>Feb</option>
                     <option value=2>Mar</option>
                     <option value=3>Apr</option>
                     <option value=4>May</option>
                     <option value=5>Jun</option>
                     <option value=6>Jul</option>
                     <option value=7>Aug</option>
                     <option value=8>Sep</option>
                     <option value=9>Oct</option>
                     <option value=10>Nov</option>
                     <option value=11>Dec</option>
                     </select>
                     <!-- Dropdown to select a specific year -->
                           <!--<select id="year" onchange="jump()"></select>
                     </div>
                     </div>
                     </div>
                     </div>
                     ,
                     {
                     
                     }
                     -->
                        </div>
                        <!-- </div>  -->
                        <div class="container">
                           <div class="columns " style="width: 100%; margin-left: 0px; margin-top: -50px;">
                              <div class="column has-text-centered" id="upcoming-carpools-column"
                                 style="margin-left: 0px; margin-right: 0px; overflow:auto;">
                                 <div class="container " style="margin-top: 5px; ">
                                    <div id="carpoolsJS">
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                     <!-- Include the JavaScript file for the calendar functionality -->
                     <script src="./script.js"></script>
                     <!-- Hero footer: will stick at the bottom -->
                     <div class="hero-foot">
                        <nav class="tabs is-boxed is-fullwidth">
                           <div class="container">
                              <ul>
                                 <li><a href="/" class="white">Upcoming Events</a></li>
                                 <li class="is-active" class="white"><a href="/mycarpools" class="is-active1">My
                                       Carpools
                                       <span id="pending-badge"
                                          style="background: #ff3860; color: white; border-radius: 10px; padding: 2px 8px; font-size: 0.8em; margin-left: 5px; display: none;"></span>
                                    </a></li>
                              </ul>
                           </div>
                        </nav>
                     </div>
                     </div>
                  </section>
   </main>

</body>
<!-- start here -->
<div class="modal" id="modal-js-edit">
   <div class="modal-background" style="background-color: rgba(10,10,10,.50)"></div>
   <div class="modal-card" style="">
      <p class="panel-heading has-text-centered" style="padding: 15px;">
         Edit Carpool
         <button class="delete" aria-label="" onclick="AllModals()" style="float: right"></button>
      </p>
      <section class="modal-card-body">

         <div class="container">
            <div class="field">
               <a class="panel-block" style="border-radius: 5px; padding:0px;">
                  <input style="margin-right: 10px;" id="email" class="input" type="email" placeholder="Driver email">
                  <input id="phone" class="input" type="tel" placeholder="Driver phone number">
               </a>
            </div>
            <div class="field" style="margin-bottom: 10px;">
               <input class="input" id="carmake" type="text" placeholder="Car make and model">
            </div>
            <div class="field" style="margin-bottom: 10px;">
               <input class="input" id="seats" type="number" min="1" max="9"
                  placeholder="Number of available car seats">
            </div>
            <div style="display: flex; gap: 10px;">
               <div>
                  <label>Pickup Location </label>
                  <div class="field" style="margin-bottom: 10px;">
                     <div class="control">
                        <div class="select">
                           <form>
                              <select id="route-type">
                                 <option value="route">Riders' Homes</option>
                                 <option value="point">Common meeting point</option>
                                 <option value="eps-campus">EPS Campus</option>
                              </select>
                           </form>
                        </div>
                     </div>
                  </div>
               </div>
               <div>
                  <label>Arrival time</label>
                  <div class="field" style="margin-bottom: 10px;">
                     <input class="input" id="arrivaltime" type="time" placeholder="Time to arrive">
                  </div>
               </div>
            </div>
         </div>

         <div class="field" style="margin-bottom: 18px;">
            <label id="address-label">Your home address </label>
            <script>
               const routeTypeSelect123 = document.getElementById('route-type');
               const addressLabel123 = document.getElementById('address-label');

               function updateAddressLabel123() {
                  const selectedOption123 = routeTypeSelect123.value;
                  if (selectedOption123 === 'route') {
                     addressLabel123.innerHTML = 'Your home address';
                     document.getElementById("address-input").disabled = false;
                     if (value2 != "none") {
                        document.getElementById("address-input").value = value2;
                     }
                  } else if (selectedOption123 === 'point') {
                     addressLabel123.innerHTML = 'Meeting point';
                     document.getElementById("address-input").value = "";
                     document.getElementById("address-input").disabled = false;
                  } else if (selectedOption123 === 'eps-campus') {
                     addressLabel123.innerHTML = 'EPS Campus';
                     document.getElementById("address-input").value = "10613 NE 38th Place, Kirkland, WA 98033";
                     document.getElementById("address-input").disabled = true;
                  }
               }

               routeTypeSelect123.addEventListener('change', updateAddressLabel123);
            </script>
            <div class="autocomplete-container" id="">
               <div class='control' id="autocomplete-container">
               </div>
            </div>
         </div>
         <div class="field">
            <label>Manage carpool</label>

            <div id="deleteCarpoolBtn">
               <div class="buttons" style="margin-bottom: 0px">
                  <div class="button is-danger is-light" style="margin-bottom: 10px" onclick="preperation();">Delete
                     carpool</div>
               </div>
            </div>

            <table class="table " style="">
               <thead>
                  <tr>
                     <th><abbr title="Friend">Carpooler</abbr></th>
                     <th>Email</th>
                     <th>Phone</th>
                     <th>Remove</th>
                  </tr>
               </thead>
               <tbody id="friendsInCarpool">
                  <!--<tr>
                     <th ><a href="mailto:ajosan@eastsideprep.org">Anmol Josan</a></th>
                     <td><a style="color: black">X</a></td>
                  </tr>
                  <tr>
                     <th ><a href="mailto:ayamashita@eastsideprep.org">Ari Yamashita</a></th>
                     <td><a style="color: black">X</a></td>
                  </tr>
                  <tr>
                     <th ><a href="mailto:pjain@eastsideprep.org">Praneel Jain</a></th>
                     <td><a style="color: black">X</a></td>
                  </tr>
                  -->
               </tbody>
            </table>

         </div>
      </section>
      <footer class="modal-card-foot" style="background-color: white; border-width: 1px; padding: 10px; ">
         <div class="buttons" style="margin-left: 0px;">
            <button class="button is-link " style="background: linear-gradient(105deg, #3273DC, #275CBF);"
               onclick="test()">Apply</button>
            <button class="button" aria-label="" onclick='document.getElementById("modal-js-edit").classList.remove("is-active");'>Cancel</button>
         </div>
      </footer>
   </div>
</div>
<!-- end here -->

</html>

<script>
   // Initialize variables
   let value2;
   let data1;
   
   // Server-rendered carpool data with error handling
   let serverJoinedCarpools = [];
   let serverOfferedCarpools = [];
   
   try {
     // Safely parse the carpool data
     if (typeof joinedCarpools === 'string') {
       try {
         serverJoinedCarpools = JSON.parse(joinedCarpools || '[]');
       } catch (e) {
         console.error('Error parsing joinedCarpools:', e);
         serverJoinedCarpools = [];
       }
     } else if (Array.isArray(joinedCarpools)) {
       serverJoinedCarpools = joinedCarpools;
     }
     
     if (typeof offeredCarpools === 'string') {
       try {
         serverOfferedCarpools = JSON.parse(offeredCarpools || '[]');
       } catch (e) {
         console.error('Error parsing offeredCarpools:', e);
         serverOfferedCarpools = [];
       }
     } else if (Array.isArray(offeredCarpools)) {
       serverOfferedCarpools = offeredCarpools;
     }
   } catch (e) {
     console.error('Error initializing carpool data:', e);
   }
   
   // Ensure we have arrays
   if (!Array.isArray(serverJoinedCarpools)) {
     console.warn('serverJoinedCarpools is not an array, defaulting to empty array');
     serverJoinedCarpools = [];
   }
   
   if (!Array.isArray(serverOfferedCarpools)) {
     console.warn('serverOfferedCarpools is not an array, defaulting to empty array');
     serverOfferedCarpools = [];
   }
   
   // Log the carpool data for debugging
   console.log('Server Joined Carpools:', serverJoinedCarpools);
   console.log('Server Offered Carpools:', serverOfferedCarpools);
   
   // Initialize carpool arrays with server data
   window.joinedCarpools = serverJoinedCarpools;
   window.offeredCarpools = serverOfferedCarpools;
   window.eventsW = [];
   window.userData1 = null;
   window.i = 0;
   
   // Get list of users from mongo
   var request = new Request("/api/users", {
      method: "GET",
      headers: new Headers({
         Accept: 'application/json',
         'Content-Type': 'application/json',
      })
   });
   fetch(request)
      .then((response) => response.json())
      .then((data) => {
         data1 = data;
         //make email equal to the actual email from db
         for (let k = 0; k < data1.length; k++) {
            if (data1[k].email === "<%= email %>") {
               console.log(data1[k].address)
               value2 = data1[k].address;
            }
            else {
               continue;
            }
         }
      })

   //Finds distance btwn two points on map
   function distance(point1, point2) {
      return Math.sqrt(
         Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2),
      );
   }

   //Sorts distances
   function sortByProximity(arrays, target) {
      return arrays.sort((arr1, arr2) => {
         const distance1 = distance(arr1, target);
         const distance2 = distance(arr2, target);
         console.log(distance1, distance2)
         return distance2 - distance1;
      });
   }

   let current;
   let newCarpoolers = [];
   function queGuay(id) {

      current = id;

      console.log(current)
      addPeople()
      updateAddressLabel123()
   }

   function addDirectionsButton(id) {
      var topRight = document.getElementsByClassName("leaflet-top leaflet-right");
      topRight[0].innerHTML = `
  <div class="leaflet-control-attribution leaflet-control"><a style="font-size: 15px; padding: 5px" onclick="getPhoneRoute('` + id + `')">View in maps <i class="fa-solid fa-arrow-up-right-from-square" aria-hidden="true"></i></a></div>`
   }

   function generateMapsLink(finalDestination, waypoints) {
      const startAddress = ''; // Leave this empty if you want to use the user's current location as the start address

      // Encode the addresses for use in URLs
      const encodedFinalDestination = encodeURIComponent(finalDestination);
      const encodedWaypoints = waypoints.map(waypoint => encodeURIComponent(waypoint));

      // Construct the URLs for Google Maps and Apple Maps
      const googleMapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startAddress}&destination=${encodedFinalDestination}&waypoints=${encodedWaypoints.join('|')}&travelmode=driving`;
      const appleMapsUrl = `https://maps.apple.com/?saddr=${startAddress}&daddr=${encodedFinalDestination}&${encodedWaypoints.map(waypoint => `address=${waypoint}`).join('&')}&dirflg=d`;

      // Detect the user's operating system
      const userAgent = navigator.userAgent || navigator.vendor || window.opera;
      const isIOS = /iPad|iPhone|iPod/.test(userAgent) && !window.MSStream;

      // Open the appropriate maps URL in a new tab based on the operating system
      let mapsUrl;
      if (isIOS) {
         mapsUrl = appleMapsUrl;
      } else if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {
         // For other mobile platforms, use Google Maps
         mapsUrl = googleMapsUrl;
      } else {
         // For desktop or unrecognized platforms, use a Google Maps URL with a route
         mapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startAddress}&destination=${encodedFinalDestination}&waypoints=${encodedWaypoints.join('|')}&travelmode=driving`;
      }

      window.open(mapsUrl, '_blank');
   }

   function getPhoneRoute(carpoolId) {
      fetch(`/api/mapRoute/${carpoolId}`, {
         method: "GET",
         headers: {
            'Content-Type': 'application/json',
         }
      })
         .then(response => {
            if (response.ok) {
               return response.json();
            } else {
               console.error('A network error occurred:', error);
               alert('A network error occurred. Please try again.');
            }
         })
         .then(data => {
            console.log(data.final)
            console.log(data.stops)
            stops = data.stops
            stops = sortByProximity(stops, data.final);
            generateMapsLink(data.final, stops);
         })
         .catch(error => {
            console.error('A network error occurred:', error);
            alert('A network error occurred. Please try again.');
         });
   }

   function preperation() {
      // if (confirm("Are you sure you want to delete this carpool for all users? This action cannot be undone.")) {
      //   deletion()
      // }
      document.getElementById("deleteCarpoolBtn").innerHTML = `   <div class="buttons" style="margin-bottom: 5px"><div class="button"  onclick="deletion();">Ok</div><div class="button is-link" onclick="returnBack();">Cancel</div></div>`

   }
   function returnBack() {
      document.getElementById("deleteCarpoolBtn").innerHTML = `     <div class="buttons" style="margin-bottom: 5px"><div class="button is-danger is-light" onclick="preperation();">Delete carpool</div></div>`
   }

   function deletion() {
      console.log("Deleting " + current)
      fetch(`/api/carpools/${current}`, { // Include the _id in the URL
         method: "DELETE",
         headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
         }
      })
         .then(response => {
            if (response.ok) {
               console.log('Successfully deleted the item.');
               location.reload();
            } else {
               console.log('Failed to delete the item.');
            }
         })
         .catch(error => {
            console.error('A network error occurred:', error);
            alert('A network error occurred. Please try again later.');
         });
   }

   // Variables are now initialized at the top of the script

   function addPeople() {
      document.getElementById("friendsInCarpool").innerHTML = '';

      for (let index = 0; index < offeredCarpools.length; index++) {
         if (offeredCarpools[index]._id == current) {
            i = index;
            console.log(i);
         }
         continue;
      }

      newCarpoolers = []
      for (k = 0; k < offeredCarpools[i].carpoolers.length; k++) {
         newCarpoolers.push(offeredCarpools[i].carpoolers[k])
      }

      for (let k = 0; k < offeredCarpools[i].carpoolers.length; k++) {
         console.log(offeredCarpools[i].carpoolers.length)
         console.log(k)
         document.getElementById("friendsInCarpool").innerHTML += `<tr id="person_` + offeredCarpools[i].carpoolers[k]._id + `">
            <th><a>` + offeredCarpools[i].carpoolers[k].firstName + " " + offeredCarpools[i].carpoolers[k].lastName + `</a></th>
            <td><a href="mailto:` + offeredCarpools[i].carpoolers[k].email + `">` + offeredCarpools[i].carpoolers[k].email + `</a></td>
            <td>` + (offeredCarpools[i].carpoolers[k].cell && offeredCarpools[i].carpoolers[k].cell !== "none" ? offeredCarpools[i].carpoolers[k].cell : "Not provided") + `</td>
            <td><a style="color: black" onclick="removePerson('` + offeredCarpools[i].carpoolers[k]._id + `')">X</a></td>
         </tr>`
         continue;
      }

      // Populate driver information fields
      document.getElementById("email").value = offeredCarpools[i].email || '';
      document.getElementById("phone").value = offeredCarpools[i].phone || '';
      document.getElementById("carmake").value = offeredCarpools[i].carMake || '';
      document.getElementById("seats").value = offeredCarpools[i].seats || '';
      document.getElementById("arrivaltime").value = offeredCarpools[i].arrivalTime || '';

      if (offeredCarpools[i].route === "route") {
         document.getElementById("route-type").value = "route"
      }
      else if (offeredCarpools[i].route === "eps-campus") {
         document.getElementById("route-type").value = "eps-campus"
      }
      else {
         document.getElementById("route-type").value = "point"
      }

      document.getElementById("address-input").value = offeredCarpools[i].wlocation
   }

   function removePerson(id) {
      for (let i = 0; i < newCarpoolers.length; i++) {
         if (newCarpoolers[i]._id == id) {
            newCarpoolers.splice(i, 1)
            document.getElementById("person_" + id).remove()
            return; // Exit after finding and removing the person
         }
      }
      // If we get here, the person wasn't found in newCarpoolers
      console.error("Person with ID " + id + " not found in carpoolers list");
   }

   function getDayOfWeek(string) {
      const d = new Date(string);
      const dayOfWeek = d.getDay();
      // Example: Get the name of the weekday (not just a number)
      const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      const currentDay = weekdays[dayOfWeek];
      return (currentDay)
   }

   function formatDate(date) {
      const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      var date = new Date(date);
      const day = weekdays[date.getDay()];
      const month = date.getMonth();
      const year = date.getFullYear();
      return `${day}, ${months[month + 1]} ${date.getDate()}, ${year}`;
   }


   //Lists events
   var request = new Request("/api/events", {
      method: "GET",
      headers: new Headers({
         Accept: 'application/json',
         'Content-Type': 'application/json',
      })
   });
   fetch(request)
      .then((response) => response.json())
      .then((data) => {
         eventsW = data;

         var request = new Request("/api/userCarpools", {
            method: "GET",
            headers: new Headers({
               Accept: 'application/json',
               'Content-Type': 'application/json',
            })
         });
         fetch(request)
            .then((response) => response.json())
            .then((data) => {
               userData1 = data;

               for (var i = 0; i < userData1.length; i++) {
                  //Make the email proper
                  let carpoolPart = userData1[i].carpoolers.find((x) => x.email === "<%= email %>")
                  if (carpoolPart != undefined) {
                     joinedCarpools.push(userData1[i])
                  }
               }

               for (var i = 0; i < userData1.length; i++) {
                  if (userData1[i].userEmail === "<%= email %>") {
                     offeredCarpools.push(userData1[i])
                  }
               }
               //event name, carpool driver name, time, reistered carpoolers

               let driver;
               let carpoolers = []
               let eventName;
               let date;
               let email


               //offered carpools
               if (offeredCarpools.length == 0 && joinedCarpools.length == 0) {
                  document.getElementById('carpoolsJS').innerHTML = `  <p class="has-text-centered">Don't see any carpools? Register for events <a href="/">here</a>.</p> `
               }
               else {
                  for (var i = 0; i < offeredCarpools.length; i++) {
                     console.log(offeredCarpools[i])
                     driver = offeredCarpools[i].firstName + " " + offeredCarpools[i].lastName
                     carpoolers = []

                     for (var k = 0; k < offeredCarpools[i].carpoolers.length; k++) {
                        const email = offeredCarpools[i].carpoolers[k].email || '';
                        const displayName = email.split('@')[0]; // Get the part before @
                        carpoolers.push(displayName);
                     }
                     console.log(eventsW)
                     for (var j = 0; j < eventsW.length; j++) {
                        if (eventsW[j]._id == offeredCarpools[i].nameOfEvent) {
                           eventName = eventsW[j].eventName
                           date = eventsW[j].date
                           date = formatDate(date)
                        }
                     }
                     document.getElementById('carpoolsJS').innerHTML += `<article class="panel is-link" style="position: relative" >
   <div class="panel-heading" style="padding: 0px; margin-bottom: 12px; border-radius: 6px 6px 0px 0px; line-height: 22px;background: linear-gradient(105deg, #3273DC, #275CBF);" >
      <div class="columns is-mobile">
         <div class="column" style=" padding: 0px; padding-left: 10px;">
            <div class=" " style="float: left; margin: 7px; left:0px;" >
               <span class="panel-icon" style='color: white; display: inline'>
                  <i class="fas fa-user" aria-hidden="true" style="margin: 13px; margin-left: 15px;"></i>
                  <p style="color: white; display: inline; font-size: 15px; font-weight: 300 ">Carpool with ` + driver + `<i class="fa-solid fa-crown" style="margin-left: 5px;"></i></p>
               </span>
            </div>
         </div>
         <div class="column" style="padding: 0px; padding-top: 0.75em; padding-bottom: 0.75em">
            <p class="" style="color: white; display: inline; font-size: 20px;  font-weight: 700;  ">` + eventName + `</p>
         </div>
         <div class="column" style="padding: 0px; padding-right: 10px;">
            <div class="white-background " style="float: right; margin: 7px; right:0px;  border-radius: 6px; " >
               <span class="panel-icon " id="spanz" style=' display: inline ;  '>
                  <i class="fas fa-car " aria-hidden="true" style="margin: 13px; margin-left: 15px;"></i>
                  <p style=" display: inline; font-size: 15px;  font-weight: 300;" id="datez" class="datew">` + date + `</p>
               </span>
            </div>
         </div>
      </div>
   </div>
   <div class="panel-block" style="display: block; padding: 1rem 1.25rem;">
      <div class="columns is-mobile is-vcentered" style="width: 100%; margin: 0;">
         <div class="column is-6" style="padding: 0.5rem;">
            <p class="control" id="registered-carpoolers">
               <strong>Riders:</strong> 
               <span id="carpoolers-${offeredCarpools[i]._id}">${carpoolers.map(email => 
                  `<span class="tag is-light">${email}</span>`
               ).join(" ")}</span>
               <br>
               <div class="co2-savings-container" style="margin-top: 0.75rem; display: inline-flex; align-items: center; background: #f0fdf4; padding: 0.4rem 0.75rem; border-radius: 20px; border: 1px solid #bbf7d0; box-shadow: 0 1px 2px rgba(0,0,0,0.05);">
                  <span class="icon has-text-success" style="margin-right: 0.5rem;">
                     <i class="fas fa-leaf"></i>
                  </span>
                  <div>
                     <div style="font-size: 0.8rem; color: #15803d; font-weight: 500;">CO₂ Saved</div>
                     <div class="co2-savings" data-carpool-id="${offeredCarpools[i]._id}" style="font-weight: 700; color: #15803d; font-size: 1.1rem;">
                        ${offeredCarpools[i].co2Savings ? (parseFloat(offeredCarpools[i].co2Savings).toFixed(2) + ' kg') : '0.00 kg'}
                     </div>
                  </div>
                  <span class="icon has-text-grey-light is-small ml-2" style="margin-left: 0.5rem;" 
                        data-tooltip="This shows the total CO₂ saved by carpooling instead of driving separately">
                     <i class="fas fa-info-circle"></i>
                  </span>
               </div>
            </p>
         </div>
         <div class="column is-6" style="padding: 0.5rem; text-align: right;">
            <div class="buttons is-justify-content-flex-end" style="margin: 0;">
               <button class="button is-link is-light is-small" onclick="getPhoneRoute('` + offeredCarpools[i]._id + `')">
                  <span class="icon">
                     <i class="fas fa-route"></i>
                  </span>
                  <span>Route</span>
               </button>
               <button class="button is-info is-light is-small js-modal-trigger" data-target="modal-js-edit" id="` + offeredCarpools[i]._id + `" onclick="queGuay('` + offeredCarpools[i]._id + `')">
                  <span class="icon">
                     <i class="fas fa-edit"></i>
                  </span>
                  <span>Edit</span>
               </button>
               <button class="button is-info is-light is-small" onclick="emailGroup('` + offeredCarpools[i]._id + `')">
                  <span class="icon">
                     <i class="fas fa-envelope"></i>
                  </span>
               </button>
               <button class="button is-info is-light is-small" onclick="textGroup('` + offeredCarpools[i]._id + `')">
                  <span class="icon">
                     <i class="fas fa-comment"></i>
                  </span>
               </button>
            </div>
         </div>
      </div>
   </div>
   <div style="margin: 10px 0; padding: 10px; background: #fffbe6; border: 1px solid #ffe08a; border-radius: 6px;">
      <b>Pending Approvals:</b><br>
      ${offeredCarpools[i].pendingRequests.map(req => `
         <div style='margin-bottom: 6px;'>
            ${req.firstName} ${req.lastName} (${req.email})
            <button class='button is-small is-success' style='margin-left:8px;' onclick="approveRequest('${offeredCarpools[i]._id}','${req.email}',true)">Approve</button>
            <button class='button is-small is-danger' style='margin-left:2px;' onclick="approveRequest('${offeredCarpools[i]._id}','${req.email}',false)">Deny</button>
         </div>
      `).join('')}
   </div>
</article>`

                  }



                  //joined carpools
                  for (var i = 0; i < joinedCarpools.length; i++) {
                     console.log("joinedCarpools[i]")
                     driver = joinedCarpools[i].firstName + " " + joinedCarpools[i].lastName
                     carpoolers = []
                     joinedCarpools[i].carpoolers
                     let driverEmail = '';
                     for (var k = 0; k < joinedCarpools[i].carpoolers.length; k++) {
                        const userEmail = joinedCarpools[i].carpoolers[k].email || '';
                        const displayName = userEmail.split('@')[0]; // Get the part before @
                        carpoolers.push(displayName);
                        driverEmail = joinedCarpools[i].email;
                     }
                     email = driverEmail;
                     console.log(eventsW)
                     for (var j = 0; j < eventsW.length; j++) {
                        if (eventsW[j]._id == joinedCarpools[i].nameOfEvent) {
                           eventName = eventsW[j].eventName
                           date = eventsW[j].date
                           date = formatDate(date)
                        }
                     }
                     document.getElementById('carpoolsJS').innerHTML += `<article class="panel is-link" style="position: relative" >
                              <div class="panel-heading" style="padding: 0px; margin-bottom: 12px; border-radius: 6px 6px 0px 0px; line-height: 22px;background: linear-gradient(105deg, #3273DC, #275CBF);" >
                                 <div class="columns is-mobile">
                                    <div class="column" style=" padding: 0px; padding-left: 10px;">
                                       <div class=" " style="float: left; margin: 7px; left:0px;" >
                                          <span class="panel-icon" style='color: white; display: inline'>
                                             <i class="fas fa-user" aria-hidden="true" style="margin: 13px; margin-left: 15px;"></i>
                                             <p style="color: white; display: inline; font-size: 15px; font-weight: 300 ">Carpool with <a style="color:white; text-decoration-line: underline" href="mailto:` + email + `">` + driver + `</a></p>
                                          </span>
                                       </div>
                                    </div>
                                    <div class="column" style="padding: 0px; padding-top: 0.75em; padding-bottom: 0.75em">
                                       <p class="" style="color: white; display: inline; font-size: 20px;  font-weight: 700;  ">` + eventName + `</p>
                                    </div>
                                    <div class="column" style="padding: 0px; padding-right: 10px;">
                                       <div class="white-background " style="float: right; margin: 7px; right:0px;  border-radius: 6px; " >
                                          <span class="panel-icon " id="spanz" style=' display: inline ;  '>
                                             <i class="fas fa-car " aria-hidden="true" style="margin: 13px; margin-left: 15px;"></i>
                                             <p style=" display: inline; font-size: 15px;  font-weight: 300;" id="datez" class="datew">` + date + `</p>
                                          </span>
                                       </div>
                                    </div>
                                 </div>
                              </div>
                              <div class="panel-block" style="display: block; padding: 1rem 1.25rem;">
                                 <div class="columns is-mobile is-vcentered" style="width: 100%; margin: 0;">
                                    <div class="column is-6" style="padding: 0.5rem;">
                                       <p class="control" id="registered-carpoolers">
                                          <strong>Riders:</strong> 
                                          <span id="carpoolers-${joinedCarpools[i]._id}">${carpoolers.map(email => 
                                             `<span class="tag is-light">${email}</span>`
                                          ).join(" ")}</span>
                                          <br>
                                          <div class="co2-savings-container" style="margin-top: 0.75rem; display: inline-flex; align-items: center; background: #f0fdf4; padding: 0.4rem 0.75rem; border-radius: 20px; border: 1px solid #bbf7d0; box-shadow: 0 1px 2px rgba(0,0,0,0.05);">
                                             <span class="icon has-text-success" style="margin-right: 0.5rem;">
                                                <i class="fas fa-leaf"></i>
                                             </span>
                                             <div>
                                                <div style="font-size: 0.8rem; color: #15803d; font-weight: 500;">Your CO₂ Savings</div>
                                                <div class="co2-savings" data-carpool-id="${joinedCarpools[i]._id}" style="font-weight: 700; color: #15803d; font-size: 1.1rem;">
                                                   ${(() => {
                                                      const currentUserEmail = '<%= email %>';
                                                      const carpooler = joinedCarpools[i].carpoolers.find(c => c.email === currentUserEmail);
                                                      const savings = carpooler?.co2Savings || 0;
                                                      return parseFloat(savings).toFixed(2) + ' kg';
                                                   })()}
                                                </div>
                                             </div>
                                             <span class="icon has-text-grey-light is-small ml-2" style="margin-left: 0.5rem;" 
                                                   data-tooltip="This shows your personal CO₂ savings from joining this carpool">
                                                <i class="fas fa-info-circle"></i>
                                             </span>
                                          </div>
                                       </p>
                                    </div>
                                    <div class="column is-6" style="padding: 0.5rem; text-align: right;">
                                       <div class="buttons is-justify-content-flex-end" style="margin: 0;">
                                          <button class="button is-link is-light is-small" onclick="getPhoneRoute('` + joinedCarpools[i]._id + `')">
                                             <span class="icon">
                                                <i class="fas fa-route"></i>
                                             </span>
                                             <span>Route</span>
                                          </button>
                                          <button class="button is-danger is-light is-small" id="` + joinedCarpools[i]._id + `" onclick="leaveIt('` + i + `')">
                                             <span class="icon">
                                                <i class="fas fa-sign-out-alt"></i>
                                             </span>
                                             <span>Leave</span>
                                          </button>
                                          <button class="button is-info is-light is-small" onclick="emailGroup('` + joinedCarpools[i]._id + `')">
                                             <span class="icon">
                                                <i class="fas fa-envelope"></i>
                                             </span>
                                          </button>
                                          <button class="button is-info is-light is-small" onclick="textGroup('` + joinedCarpools[i]._id + `')">
                                             <span class="icon">
                                                <i class="fas fa-comment"></i>
                                             </span>
                                          </button>
                                       </div>
                                    </div>
                                 </div>
                              </div>
                           </article>`
                  }
               }
               //generation here
               modalFunctions()




            })
            .catch((error) => {
               console.error(error)
            });







      })


   function modalFunctions() {
      function openModal($el) {
         $el.classList.add('is-active');
      }

      function Modal($el) {
         $el.classList.remove('is-active');
         returnBack()
      }

      function AllModals() {
         (document.querySelectorAll('.modal') || []).forEach(($modal) => {
            Modal($modal);
         });
      }

      // Add a click event on buttons to open a specific modal
      (document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
         const modal = $trigger.dataset.target;
         const $target = document.getElementById(modal);

         $trigger.addEventListener('click', () => {
            openModal($target);
         });
      });

      // Add a click event on various child elements to close the parent modal
      (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .cancel') || []).forEach(($close) => {
         const $target = $close.closest('.modal');

         $close.addEventListener('click', () => {
            closeModal($target);
         });
      });

      // Add a keyboard event to close all modals
      document.addEventListener('keydown', (event) => {
         const e = event || window.event;

         if (e.keyCode === 27) { // Escape key
            closeAllModals();
         }
      });
   }
</script>
<script defer>
   function navBurger() {
      var burger = document.getElementById('nav-toggle');
      var menu = document.getElementById('navbarMenuHeroC');
      burger.addEventListener('click', function () {
         burger.classList.toggle('is-active');
         menu.classList.toggle('is-active');
      });
   }
   navBurger()





   function openModal($el) {
      $el.classList.add('is-active');
   }

   function closeModal($el) {
      $el.classList.remove('is-active');
      returnBack()
   }

   function closeAllModals() {
      (document.querySelectorAll('.modal') || []).forEach(($modal) => {
         closeModal($modal);
      });
   }

   // Add a click event on buttons to open a specific modal
   (document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
      const modal = $trigger.dataset.target;
      const $target = document.getElementById(modal);

      $trigger.addEventListener('click', () => {
         openModal($target);
      });
   });

   // Add a click event on various child elements to close the parent modal
   (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .cancel') || []).forEach(($close) => {
      const $target = $close.closest('.modal');

      $close.addEventListener('click', () => {
         closeModal($target);
      });
   });

   // Add a keyboard event to close all modals
   document.addEventListener('keydown', (event) => {
      const e = event || window.event;

      if (e.keyCode === 27) { // Escape key
         closeAllModals();
      }
   });

   var input = [];
   var input2 = [];

   function leaveIt(i) {
      var answer;


      console.log(joinedCarpools[i].carpoolers + " " + i);
      console.log(joinedCarpools[i]);

      input = joinedCarpools[i].carpoolers;
      input2 = joinedCarpools[i];

      for (let j = 0; j < joinedCarpools[i].carpoolers.length; j++) {
         if (input[j].email === "<%= email %>") {
            answer = input[j]._id;
            console.log(input[j])
            break;
         }
      }



      fetch(`/api/carpools/deleteCarpooler`, {
         method: "PATCH",
         headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
         },
         body: JSON.stringify({ _id: answer, _id2: input2._id })
      })
         .then(response => {
            if (response.ok) {
               console.log('Successfully deleted the item.');
               location.reload();
            } else {
               console.log('Failed to delete the item.');
            }
         })
         .catch(error => {
            console.error('A network error occurred:', error);
            alert('A network error occurred. Please try again later.');
         });
   }


   function test() {
      let newData = document.getElementById("address-input").value;
      let value3 = document.getElementById("route-type").value;
      let email = document.getElementById("email").value;
      let phone = document.getElementById("phone").value;
      let carMake = document.getElementById("carmake").value;
      let seats = document.getElementById("seats").value;
      let arrivalTime = document.getElementById("arrivaltime").value;
      let cutCarpoolers = newCarpoolers;

      console.log("Updating carpool with ID:", current);
      fetch(`/api/carpools/updateRoute/${current}`, {
         method: "PATCH",
         headers: {
            'Content-Type': 'application/json',
         },
         body: JSON.stringify({
            route: value3,
            wlocation: newData,
            carpoolers: cutCarpoolers,
            email: email,
            phone: phone,
            carMake: carMake,
            seats: seats,
            arrivalTime: arrivalTime
         })
      })
         .then(response => {
            if (!response.ok) {
               window.location.href = "/mycarpools?error=Error updating carpool, please try again";
            } else {
               window.location.href = "/mycarpools?message=Carpool updated successfully";
            }
         })
         .catch(error => {
            console.error('A network error occurred:', error);
            console.error('A network error occurred. Please try again later.');
         });
   }




   document.body.onmousedown = function () {
      if (document.getElementById('address-input') != null) {
         document.getElementById("autocomplete-container").classList.remove("is-loading");
      }

   }

   function addressAutocomplete(containerElement, idName, callback, options) {
      // create input element
      var inputElement = document.createElement("input");
      inputElement.setAttribute("type", "text");
      inputElement.setAttribute("placeholder", options.placeholder);
      inputElement.setAttribute("id", idName);
      inputElement.classList.add("input");
      containerElement.appendChild(inputElement);



      // add input field clear button
      var clearButton = document.createElement("div");
      clearButton.classList.add("clear-button");
      addIcon(clearButton);
      clearButton.addEventListener("click", (e) => {
         e.stopPropagation();
         inputElement.value = '';
         callback(null);
         clearButton.classList.remove("visible");
         closeDropDownList();
      });
      containerElement.appendChild(clearButton);

      /* Current autocomplete items data (GeoJSON.Feature) */
      var currentItems;

      /* Active request promise reject function. To be able to cancel the promise when a new request comes */
      var currentPromiseReject;

      /* Focused item in the autocomplete list. This variable is used to navigate with buttons */
      var focusedItemIndex;

      /* Execute a function when someone writes in the text field: */
      inputElement.addEventListener("input", function (e) {
         var currentValue = this.value;

         document.getElementById("autocomplete-container").classList.add("is-loading");

         /* Close any already open dropdown list */
         closeDropDownList();

         // Cancel previous request promise
         if (currentPromiseReject) {
            currentPromiseReject({
               canceled: true
            });
         }

         if (!currentValue) {
            clearButton.classList.remove("visible");
            return false;
         }

         // Show clearButton when there is a text
         clearButton.classList.add("visible");

         /* Create a new promise and send geocoding request */
         var promise = new Promise((resolve, reject) => {
            currentPromiseReject = reject;

            var apiKey = "992ef3d60d434f2283ea8c6d70a4898d";
            var url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(currentValue)}&limit=5&apiKey=${apiKey}`;

            if (options.type) {
               url += `&type=${options.type}`;
            }

            fetch(url)
               .then(response => {
                  // check if the call was successful
                  if (response.ok) {
                     response.json().then(data => resolve(data));

                  } else {
                     response.json().then(data => reject(data));
                  }
               });
         });

         promise.then((data) => {
            document.getElementById("autocomplete-container").classList.remove("is-loading");
            currentItems = data.features;

            /*create a DIV element that will contain the items (values):*/
            var autocompleteItemsElement = document.createElement("div");
            autocompleteItemsElement.setAttribute("class", "autocomplete-items");
            containerElement.appendChild(autocompleteItemsElement);

            /* For each item in the results */
            data.features.forEach((feature, index) => {
               /* Create a DIV element for each element: */
               var itemElement = document.createElement("DIV");
               /* Set formatted address as item value */
               itemElement.innerHTML = feature.properties.formatted;
               itemElement.classList.add("hoverAddress");
               /* Set the value for the autocomplete text field and notify: */
               itemElement.addEventListener("click", function (e) {
                  inputElement.value = currentItems[index].properties.formatted;



                  callback(currentItems[index]);

                  /* Close the list of autocompleted values: */
                  closeDropDownList();
               });

               autocompleteItemsElement.appendChild(itemElement);
            });
         }, (err) => {
            if (!err.canceled) {
               console.log(err);
            }
         });
      });

      /* Add support for keyboard navigation */
      inputElement.addEventListener("keydown", function (e) {
         var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
         if (autocompleteItemsElement) {
            var itemElements = autocompleteItemsElement.getElementsByTagName("div");
            if (e.keyCode == 40) {
               e.preventDefault();
               /*If the arrow DOWN key is pressed, increase the focusedItemIndex variable:*/
               focusedItemIndex = focusedItemIndex !== itemElements.length - 1 ? focusedItemIndex + 1 : 0;
          /*and and make the current item more visible:*/-
                  setActive(itemElements, focusedItemIndex);
            } else if (e.keyCode == 38) {
               e.preventDefault();

               /*If the arrow UP key is pressed, decrease the focusedItemIndex variable:*/
               focusedItemIndex = focusedItemIndex !== 0 ? focusedItemIndex - 1 : focusedItemIndex = (itemElements.length - 1);
               /*and and make the current item more visible:*/
               setActive(itemElements, focusedItemIndex);
            } else if (e.keyCode == 13) {
               /* If the ENTER key is pressed and value as selected, close the list*/
               e.preventDefault();
               if (focusedItemIndex > -1) {
                  closeDropDownList();
               }
            }
         } else {
            if (e.keyCode == 40) {
               /* Open dropdown list again */
               var event = document.createEvent('Event');
               event.initEvent('input', true, true);
               inputElement.dispatchEvent(event);
            }
         }
      });

      function setActive(items, index) {
         if (!items || !items.length) return false;

         for (var i = 0; i < items.length; i++) {
            items[i].classList.remove("autocomplete-active");
         }

         /* Add class "autocomplete-active" to the active element*/
         items[index].classList.add("autocomplete-active");

         // Change input value and notify
         inputElement.value = currentItems[index].properties.formatted;
         callback(currentItems[index]);
      }

      function closeDropDownList() {
         var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
         if (autocompleteItemsElement) {
            containerElement.removeChild(autocompleteItemsElement);
         }

         focusedItemIndex = -1;
      }

      function addIcon(buttonElement) {
         var svgElement = document.createElementNS("", 'svg');
         svgElement.setAttribute('viewBox', "0 0 24 24");
         svgElement.setAttribute('height', "24");


      }

      /* Close the autocomplete dropdown when the document is clicked. 
      Skip, when a user clicks on the input field */
      document.addEventListener("click", function (e) {
         if (e.target !== inputElement) {
            closeDropDownList();
         } else if (!containerElement.querySelector(".autocomplete-items")) {
            // open dropdown list again
            var event = document.createEvent('Event');
            event.initEvent('input', true, true);
            inputElement.dispatchEvent(event);
         }
      });

   }
   addressAutocomplete(document.getElementById("autocomplete-container"), "address-input", (data) => {
      console.log("Selected option: ");
      console.log(data);
      console.log(data.properties.formatted);
      arr.push(data.properties.formatted);

   }, {

      placeholder: "Enter Address Here"

   });


   let userData1s

   /*var request = new Request("/api/users", {
      method: "GET",
      headers: new Headers({
        Accept: 'application/json',
        'Content-Type': 'application/json',
      })
    });
    fetch(request)
      .then((response) => response.json())
      .then((data) => {
        userData1s = data;
          for (let k = 0; k < userData1s.length; k++) {
            if(userData1s[k].dark === true){
               document.getElementById("head").style.background = "#1c1c1c";
               let temp = document.getElementsByClassName("title");
               for (let i = 0; i < temp.length; i++) {
                 temp[i].style.color = "white"
               }
               let Cont = document.getElementsByClassName("container");
               for (let i = 0; i < Cont.length; i++) {
                 Cont[i].style.color = "white"
               }
               let sub = document.getElementsByClassName("subtitle");
               for (let i = 0; i < sub.length; i++) {
                 sub[i].style.color = "white"
               }
               setInterval(myTimer, 1, k);
               let control = document.getElementsByClassName("hero-foot");
               for (let i = 0; i < control.length; i++) {
                 control[i].style.background = "#1c1c1c";
               }
               let tabs = document.getElementsByClassName("tabs");
               for (let i = 0; i < tabs.length; i++) {
                  tabs[i].style.background = "black";
                  tabs[i].style.color = "white";
               }
               let white = document.getElementsByClassName("white");
               for (let i = 0; i < white.length; i++) {
                  white[i].style.color = "white";
               }
               let isactive = document.getElementsByClassName("is-active");
              for (let i = 0; i < isactive.length; i++) {
                  isactive[i].style.color = "white";
                  isactive[i].style.bordercolor = "#3e3e3e";
              }
              let isactive1 = document.getElementsByClassName("is-active1");
              for (let i = 0; i < isactive1.length; i++) {
                  isactive1[i].style.background = "#3e3e3e";
                  isactive1[i].style.border = "#3e3e3e";
                  isactive1[i].style.color = "white";
              }
              let leafletcontrolzoomin = document.getElementsByClassName("leaflet-control-zoom-in");
              for (let i = 0; i < leafletcontrolzoomin.length; i++) {
                  leafletcontrolzoomin[i].style.background = "rgb(0 0 0)";
                  leafletcontrolzoomin[i].style.color = "white";
              }
              let leafletcontrolzoomin1 = document.getElementsByClassName("leaflet-control-zoom-out");
              for (let i = 0; i < leafletcontrolzoomin1.length; i++) {
                  leafletcontrolzoomin1[i].style.background = "rgb(0 0 0)";
                  leafletcontrolzoomin1[i].style.color = "white";
              }
         }

       }
       })*/

</script>
<script>
   function myTimer(i) {
      let control = document.getElementsByClassName("control");
      for (let i = 0; i < control.length; i++) {

         control[i].style.color = "white"
      }
      let button = document.getElementsByClassName("button");
      for (let i = 0; i < button.length; i++) {
         button[i].style.color = "#ffffff";
         button[i].style.background = "#3c3c3c";
         button[i].style.border = "#bcae98";
      }
      let whitebackground = document.getElementsByClassName("white-background");
      for (let i = 0; i < whitebackground.length; i++) {
         whitebackground[i].style.background = "black";
      }
      let icons = document.getElementsByClassName("panel-icon ");
      for (let i = 0; i < icons.length; i++) {
         icons[i].style.color = "white";
      }
      let dates = document.getElementsByClassName("datew")
      for (let i = 0; i < dates.length; i++) {
         dates[i].style.color = "white";
      }
      clearInterval(myTimer);
   }
</script>
<script>
   function emailGroup(carpoolId) {
      fetch(`/api/carpools/${carpoolId}/contact-info`, {
         method: "GET",
         headers: {
            'Content-Type': 'application/json',
         }
      })
         .then(response => response.json())
         .then(data => {
            const emails = data.emails.join(',');
            window.location.href = `mailto:${emails}`;
         })
         .catch(error => {
            console.error('Error:', error);
            alert('Failed to get contact information. Please try again.');
         });
   }

   function textGroup(carpoolId) {
      fetch(`/api/carpools/${carpoolId}/contact-info`, {
         method: "GET",
         headers: {
            'Content-Type': 'application/json',
         }
      })
         .then(response => response.json())
         .then(data => {
            const phones = data.phones.filter(phone => phone && phone !== "none").join(',');
            if (phones) {
               window.location.href = `sms:${phones}`;
            } else {
               alert('No phone numbers available for this group.');
            }
         })
         .catch(error => {
            console.error('Error:', error);
            alert('Failed to get contact information. Please try again.');
         });
   }
</script>
<script>
   async function approveRequest(carpoolId, requesterEmail, isApproved) {
      const url = `/api/carpools/${carpoolId}/${isApproved ? 'approve' : 'deny'}`;
      const data = { email: requesterEmail };

      try {
         // Show loading state
         const approveBtn = document.querySelector(`button[onclick*="approveRequest('${carpoolId}','${requesterEmail}',true)"]`);
         const denyBtn = document.querySelector(`button[onclick*="approveRequest('${carpoolId}','${requesterEmail}',false)"]`);
         
         if (approveBtn) approveBtn.classList.add('is-loading');
         if (denyBtn) denyBtn.classList.add('is-loading');

         const response = await fetch(url, {
            method: 'POST',
            headers: {
               'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
         });

         const result = await response.json();
         
         // Remove loading state
         if (approveBtn) approveBtn.classList.remove('is-loading');
         if (denyBtn) denyBtn.classList.remove('is-loading');
         
         if (result.success) {
            // Find the request in the UI and remove it
            const requestElement = document.querySelector(`.carpool-request[data-email="${requesterEmail}"]`);
            if (requestElement) {
               requestElement.remove();
            }

            // If approved, update the UI
            if (isApproved && result.data) {
               const { co2Savings, carpoolId: updatedCarpoolId } = result.data;
               
               // Update CO2 savings display
               const co2Element = document.querySelector(`.co2-savings[data-carpool-id="${updatedCarpoolId}"]`);
               if (co2Element) {
                  co2Element.textContent = co2Savings > 0 ? `${parseFloat(co2Savings).toFixed(2)} kg` : '0.00 kg';
               }
               
               // Update the carpoolers list
               const carpoolersList = document.querySelector(`#carpoolers-${updatedCarpoolId}`);
               if (carpoolersList) {
                  const newCarpooler = document.createElement('span');
                  newCarpooler.className = 'tag is-success is-light';
                  newCarpooler.textContent = requesterEmail.split('@')[0];
                  carpoolersList.appendChild(document.createTextNode(', '));
                  carpoolersList.appendChild(newCarpooler);
               }
               
               // Show the updated CO2 savings with a highlight effect
               if (co2Element) {
                  co2Element.parentElement.style.transition = 'all 0.5s ease';
                  co2Element.parentElement.style.backgroundColor = '#e8f5e9';
                  setTimeout(() => {
                     co2Element.parentElement.style.backgroundColor = '#f5f5f5';
                  }, 1500);
               }
            }

            // Show a success message
            showNotification(
               result.message || (isApproved ? 'Request approved successfully' : 'Request denied'),
               isApproved ? 'success' : 'info'
            );

            // Reload the page after a short delay to ensure UI is in sync
            setTimeout(() => {
               window.location.reload();
            }, 2000);
         } else {
            showNotification(result.error || 'An error occurred', 'danger');
         }
      } catch (error) {
         console.error('Error:', error);
         showNotification('An error occurred while processing your request', 'danger');
         
         // Remove loading state in case of error
         const approveBtn = document.querySelector(`button[onclick*="approveRequest('${carpoolId}','${requesterEmail}',true)"]`);
         const denyBtn = document.querySelector(`button[onclick*="approveRequest('${carpoolId}','${requesterEmail}',false)"]`);
         if (approveBtn) approveBtn.classList.remove('is-loading');
         if (denyBtn) denyBtn.classList.remove('is-loading');
      }
   }
   
   // Function to refresh carpool data
   async function refreshCarpoolData() {
      try {
         const response = await fetch('/mycarpools');
         const text = await response.text();
         const parser = new DOMParser();
         const doc = parser.parseFromString(text, 'text/html');
         
         // Update the carpool list
         const newCarpoolsJS = doc.getElementById('carpoolsJS');
         if (newCarpoolsJS) {
            document.getElementById('carpoolsJS').innerHTML = newCarpoolsJS.innerHTML;
         }
         
         // Update the carpool data variables
         const scriptContent = Array.from(doc.scripts).find(s => 
            s.textContent.includes('window.joinedCarpools')
         )?.textContent;
         
         if (scriptContent) {
            // Extract the carpool data using a temporary function
            const getCarpoolData = new Function(`
               ${scriptContent}
               return { joinedCarpools: window.joinedCarpools, offeredCarpools: window.offeredCarpools };
            `);
            
            const { joinedCarpools, offeredCarpools } = getCarpoolData();
            window.joinedCarpools = joinedCarpools || [];
            window.offeredCarpools = offeredCarpools || [];
         }
      } catch (error) {
         console.error('Error refreshing carpool data:', error);
         // If there's an error, just reload the page
         window.location.reload();
      }
   }
</script>
<div class="modal" id="disclaimer-modal">
   <div class="modal-background"></div>
   <div class="modal-card">
      <section class="modal-card-body" style="border-radius: 6px 6px 0px 0px;">
         <p class="has-text-centered is-size-5">This is an app maintained by Eastside Prep's Hack Club, a group of Upper
            School students that meet every Thursday at 11:05 pm in TMAC-007. Please email Hack Club Co-President Anmol
            Singh Josan, ajosan@eastsideprep.org, if you have any questions.</p>
         <br>
         <p class="has-text-centered is-size-5">Eastside Preparatory School does not mandate or encourage the use of
            this application. They do not claim any responsibility for the maintenance, upkeep, and development of this
            application. This is entirely student-run.</p>
      </section>
      <footer class="modal-card-foot">
         <div class="buttons">
            <div class="button center is-link" onclick="closeDisclaimer()"
               style="background: linear-gradient(105deg, #3273DC, #275CBF); margin-top: 20px; margin-bottom: -20px">
               Close</div>
         </div>
      </footer>
   </div>
</div>

<script>
   function showDisclaimer() {
      document.getElementById('disclaimer-modal').classList.add('is-active');
   }

   function closeDisclaimer() {
      document.getElementById('disclaimer-modal').classList.remove('is-active');
   }

   let pendingCount = 0;
   for (let i = 0; i < offeredCarpools.length; i++) {
      if (offeredCarpools[i].pendingRequests && offeredCarpools[i].pendingRequests.length > 0) {
         pendingCount += offeredCarpools[i].pendingRequests.length;
      }
   }
   if (pendingCount > 0) {
      document.getElementById('pending-badge').innerText = pendingCount;
      document.getElementById('pending-badge').style.display = 'inline-block';
   }

   function approveRequest(carpoolId, email, approve) {
      fetch(`/api/carpools/${carpoolId}/approve`, {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify({ email, approve })
      })
         .then(async res => {
            const data = await res.json();
            if (!res.ok) {
               throw new Error(data.error || 'Request failed');
            }
            return data;
         })
         .then(data => {
            if (approve) {
               // Show success message with CO2 savings if available
               const co2Message = data.data ? 
                  `Approved! Estimated CO2 savings: ${data.data.co2Savings.toFixed(2)} lbs` : 
                  'Request approved';
               
               showNotification(co2Message, 'is-success');
               
               // Update the UI with new CO2 savings
               if (data.data && data.data.co2Savings) {
                  // Update the CO2 savings display immediately
                  updateCO2SavingsUI(data.data.co2Savings);
                  
                  // Find all carpool elements that might contain this user
                  const carpoolElements = document.querySelectorAll('.panel.is-link');
                  carpoolElements.forEach(element => {
                     const carpoolIdElement = element.querySelector('button[onclick^="leaveIt"]');
                     if (carpoolIdElement) {
                        const btnId = carpoolIdElement.id;
                        if (btnId === carpoolId) {
                           // Find the CO2 savings element in this carpool
                           const co2Element = element.querySelector('.icon-text .has-text-success strong');
                           if (co2Element) {
                              // Extract the current CO2 value or default to 0
                              const currentCo2Text = co2Element.textContent.trim();
                              let currentCo2 = 0;
                              if (currentCo2Text !== 'Calculating...') {
                                 currentCo2 = parseFloat(currentCo2Text) || 0;
                              }
                              // Update the display with the new total
                              co2Element.textContent = (currentCo2 + data.data.co2Savings).toFixed(2) + ' kg';
                           }
                        }
                     }
                  });
               }
            } else {
               showNotification('Request denied', 'is-info');
            }
            // Reload after a short delay to ensure UI is fully updated
            setTimeout(() => location.reload(), 1500);
         })
         .catch((error) => {
            console.error('Error:', error);
            showNotification(`Failed to update request: ${error.message}`, 'is-danger');
         });
   }
   
   function showNotification(message, type = 'is-info') {
      // Use Bulma notification if available, otherwise fall back to alert
      if (typeof bulmaToast !== 'undefined') {
         bulmaToast.toast({
            message: message,
            type: type,
            position: 'bottom-right',
            dismissible: true,
            pauseOnHover: true,
            duration: 5000,
            animate: { in: 'fadeIn', out: 'fadeOut' }
         });
      } else {
         alert(message);
      }
   }
   
   function updateCO2SavingsUI(co2Savings) {
      // Find and update the CO2 savings display
      const co2Element = document.getElementById('total-co2-saved');
      if (co2Element) {
         const currentSavings = parseFloat(co2Element.textContent) || 0;
         co2Element.textContent = (currentSavings + co2Savings).toFixed(2);
      }
   }

   function formatTime12h(timeStr) {
      if (!timeStr) return '';
      const d = new Date('1970-01-01T' + timeStr);
      let h = d.getHours();
      let m = d.getMinutes();
      let ampm = h >= 12 ? 'PM' : 'AM';
      h = h % 12;
      h = h ? h : 12;
      m = m < 10 ? '0' + m : m;
      return h + ':' + m + ' ' + ampm;
   }
</script>