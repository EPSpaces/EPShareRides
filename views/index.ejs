<!DOCTYPE html>
<html lang="en" id="head">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>EPCarpool</title>
  <link href="./bulma.min.css" rel="stylesheet" type="text/css" />
  <link href="./style.css" rel="stylesheet" type="text/css" />
  <script src="https://kit.fontawesome.com/16ae8e710d.js" crossorigin="anonymous"></script>
  <link rel="icon" href="favicon.png" type="image/x-icon">
  <link rel="stylesheet" href="./style.css">
</head>

<body>
  <main>
    <section class="hero is-fullheight">
      <!-- Hero head: will stick at the top -->
      <div class="hero-head">
        <header class="navbar">
          <div class="container">
            <div class="navbar-brand">
              <a class="navbar-item">
                <div style="position: relative; display: flex; align-items: center;">
                  <img src="EPS Logo - Transparent-4.png" alt="Logo">
                  <h1 class="title is-3" style="margin-left: 10px; margin-bottom: -10px">EPCarpool</h1>
                  <span
                    style="position: absolute; top: -5px; right: -25px; background: #3273DC; color: white; padding: 2px 6px; border-radius: 4px; font-size: 0.7em; font-weight: bold;">BETA</span>
                </div>
              </a>
              <div class="navbar-item" style="padding: 0.5rem 1.25rem;">
                <button class="button is-info is-light" onclick="showDisclaimer()">
                  <span class="icon">
                    <i class="fas fa-info-circle"></i>
                  </span>
                </button>
              </div>
              <span class="navbar-burger" data-target="navbarMenuHeroC" id="nav-toggle">
                <span></span>
                <span></span>
                <span></span>
              </span>
            </div>
            <div id="navbarMenuHeroC" class="navbar-menu ">
              <div class="navbar-end">
                <div class="is-button is-link">
                  <div class="navbar-item">
                    <span style="font-size: 1em; color: #30B700; float: right">
                      <a class="fa-solid fa-leaf" href="/sustainabilityStatement" style="color: #30B700"></a>
                    </span>
                    <div class="buttons" style="margin: 10px;margin-right: 0px;">
                      <a class="button is-link is-outlined " href="/logout">
                        Log out
                      </a>
                      <div class="navbar-item has-dropdown is-hoverable "
                        onclick="document.getElementById('navbar-dropdown').style.visibility = 'visible';">
                        <a class="button is-link" id="name_button"
                          style="background: linear-gradient(105deg, #3273DC, #275CBF);">
                          <%= firstName %>
                            <%= lastName %>
                              <i style="margin-left: 5px;" class="fas fa-angle-down" aria-hidden="true"></i>
                        </a>
                        <div id="filler"
                          style="width: 130px; background-color: transparent; height: 20px; position: absolute; margin-top: -15px;">
                        </div>
                        <div class="navbar-dropdown" id="navbar-dropdown">
                          <a class="navbar-item" href="/updateSettings">
                            Update settings
                          </a>
                          <a class="navbar-item" href="https://forms.office.com/r/deCSjA7bCR">
                            Report a bug
                          </a>
                          <a class="navbar-item" href="/sustainabilityStatement">
                            Sustainability statement
                          </a>
                          <hr class="navbar-divider">
                          <div class="navbar-item">
                            Version <%= process.env.VERSION %>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </header>
      </div>
      <!-- Hero content: will be in the middle -->
      <div class="hero-body" style="padding-bottom: 80px;">
        <div class="container" style="margin-top: 0px; width: 100%; ">
          <div id="create_event" style="margin-bottom: 0px">
          </div>
          <div class=" " style="position: absolute; margin-top: -40px;  width: 100%; ">
            <label for="filter">Filter by: </label>
            <select name="filter" id="filter">
              <option value="all">All</option>
              <option value="sports">Sports</option>
              <option value="academic teams">Academic teams</option>
              <option value="socials">Socials</option>
              <option value="other">Other</option>
            </select>

            <span id="createEventButton">
              <button id="buttonzx" onclick="var create_event = document.getElementById('create_event'); create_event.style.marginBottom='50px'; create_event.innerHTML = `<form class='box'>
    <div class='field'>
      <label class='label' for='ename'>Event name:</label>
      <div class='control'>
        <input class='input' type='text' id='ename' name='name'>
      </div>
    </div>
    <div class='field'>
      <label class='label' for='elocation'>Location name:</label>
      <div class='control'>
        <input class='input' type='text' id='elocation' name='location'>
      </div>
    </div>
    <div class='field'>
      <label class='label' for='address'>Address:</label>
      <div class='control'>
        <div class='autocomplete-container' id='autocomplete-container3'>
          <!-- ...existing autocomplete code gets inserted here... -->
        </div>
      </div>
    </div>
    <div class='field'>
      <label class='label' for='edate'>Date and time:</label>
      <div class='control'>
        <input class='input' type='datetime-local' id='edate' name='date'>
      </div>
    </div>
    <div class='field'>
      <label class='label' for='ecategory'>Category:</label>
      <div class='control'>
        <div class='select'>
          <select id='ecategory' name='category'>
            <option value='sports'>Sports</option>
            <option value='academic teams'>Academic teams</option>
            <option value='socials'>Socials</option>
            <option value='other'>Other</option>
          </select>
        </div>
      </div>
    </div>
    <div class='field'>
      <div class='control'>
        <button class='button is-link' type='button' onclick='createevent()'>Submit</button>
      </div>
    </div>
  </form>`; runAddressAutocomplete()">
    Create event
  </button>
</span>
          </div>
          <!--Start here  -->
          <div id="eventsJS">
          </div>
        </div>
      </div>

      <!-- Hero footer: will stick at the bottom -->
      <div class="hero-foot">
        <nav class="tabs is-boxed is-fullwidth">
          <div class="container">
            <ul>
              <li class="is-active"><a href="/" class="is-active1">Upcoming Events</a></li>
              <li><a href="/mycarpools" class="white">My Carpools</a></li>
            </ul>
          </div>
        </nav>
      </div>
    </section>
  </main>
  <script></script>
  <!-- start here -->
  <div class="modal " id="modal-js-example">
    <div class="modal-background" style="background-color: rgba(10,10,10,.50)"></div>
    <div class="modal-card">
      <p class="panel-heading has-text-centered" style="padding: 15px; padding-left: 20px; display: table">
        <span style=" display: table-cell;vertical-align: middle; text-align: center; position:absolute">
          <i class="fa-solid fa-car-side" style='float:left; transform:translate(0px,5px)'></i>
        </span>
        Offer to Carpool
        <button class="delete" aria-label="close" onclick="closeAllModals()" style="float: right"></button>
      </p>
      <section class="modal-card-body">
        <div class="container">
          <label>Carpool information </label>
          <div class="field">
            <a class="panel-block" id="carpoolinfo" style="border-radius: 5px; padding:0px;">
              <input style="margin-right: 10px; " id="fname" class="input" type="fname" placeholder="Driver first name">
              <input id="lname" class="input" type="lname" placeholder="Driver last name">
            </a>
          </div>
          <div class="field">
            <a class="panel-block" style="border-radius: 5px; padding:0px;">
              <input style="margin-right: 10px;" id="email" class="input" type="email" placeholder="Driver email">
              <input id="phone" class="input" type="tel" placeholder="Driver phone number">
            </a>
          </div>
          <div class="field" style="margin-bottom: 10px;">
            <input class="input" id="carmake" type="text" placeholder="Car make and model">
          </div>
          <div class="field" style="margin-bottom: 10px;">
            <input class="input" id="seats" type="number" min="1" max="9" placeholder="Number of available car seats">
          </div>
          <div style="display: flex; gap: 10px;">
            <div>
              <label>Pickup Location </label>
              <div class="field" style="margin-bottom: 10px;">
                <div class="control">
                  <div class="select">
                    <form>
                      <select id="route-type">
                        <option value="route">Riders' Homes</option>
                        <option value="point">Common meeting point</option>
                        <option value="eps-campus">EPS Campus</option>
                      </select>
                    </form>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <label>Arrival time</label>
              <div class="field" style="margin-bottom: 10px;">
                <input class="input" id="arrivaltime" type="time" placeholder="Time to arrive">
              </div>
            </div>
          </div>
          <div class="field">
            <label id="address-label">Your home address</label>
            <div class="autocomplete-container" id="">
              <div class="control" id="autocomplete-container">
                <div class="clear-button"></div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot" style="background-color: white; border-width: 1px; padding: 10px; ">
        <div class="buttons" style="margin-left: 0px;">
          <button class="button is-link " style="background: linear-gradient(105deg, #3273DC, #275CBF);"
            onclick="offer();window.location.href='/mycarpools'">Create carpool</button>
          <button class="button" aria-label="close" onclick="closeAllModals()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end here -->
  <!-- start here -->
  <div class="modal " id="modal-js-register">
    <div class="modal-background" style="background-color: rgba(10,10,10,.50)"></div>
    <div class="modal-card">
      <p class="panel-heading has-text-centered" style="padding: 15px; display: table;padding-left: 20px">
        <span style=" display: table-cell;vertical-align: middle; text-align: center;">
          <i class="fa-solid fa-users" style='float:left; position: absolute; transform: translate(0px, -10px)'></i>
        </span>
        Register to a Carpool
        <button class="delete" aria-label="close" onclick="closeAllModals()" style="float: right"></button>
      </p>
      <section class="modal-card-body">
        <div class="container">
          <label id="registerTitle"></label>

          <div style="overflow: auto;">
            <div id="registerJS">
              <!-- <div class="notification" style="padding: 10px;   margin-bottom: 10px;">
                           <div class="button  selectCarpool" style=" margin-left: 10px; margin-top: 4px; background-color: transparent; float: right" onclick=" if (this.classList[2] == 'is-focused') {unfocus()} else {unfocus(); this.classList.add('is-focused')}">Select</div>
                                   <div style="float: right; margin-top: 3px;"  >2/6 signed up</div>
                                                             Organizer: <a style="color: #3273dc" href="mailto:ajosan@eastsideprep.org">ajosan@eastsideprep.org</a>
                                     <br>  Route type: Riders' Homes
                           <br> 
                                 </div>    -->
            </div>
          </div>
        </div>
        <div class="field">
          <label>Your home address </label>
          <div class="autocomplete-container " id="">
            <div class='control' id="autocomplete-container2">
              <!-- South Kirkland Park and Ride, Bellevue, WA 98004, United States of America -->
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot" style="background-color: white; border-width: 1px; padding: 10px; ">
        <var></var>
        <div class="buttons" style="margin-left: 0px;">
          <button class="button is-link " style="background: linear-gradient(105deg, #3273DC, #275CBF);"
            onclick="joinCarpool(); window.location.href='/mycarpools'">Join carpool</button>
          <button class="button" aria-label="close" onclick="closeAllModals()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end here -->
  <script type="text/javascript">
    //Don't worry about it
    console.error("418 I'm a teapot");

    let value2;
    let data1;
    //Sends get request to mongo users db
    var request = new Request("/api/users", {
      method: "GET",
      headers: new Headers({
        Accept: 'application/json',
        'Content-Type': 'application/json',
      })
    });
    fetch(request)
      .then((response) => response.json())
      .then((data) => {
        data1 = data;
        for (let k = 0; k < data1.length; k++) {
          //makes user email equal what we get from db
          if (data1[k].email === "<%= email %>") {
            console.log(data1[k].address)
            value2 = data1[k].address;
          }
          else {
            continue;
          }
        }
      })


    //create vars
    let carpooledEvents = []
    let userData1;
    let carpoolPart;
    let carpooledEvent
    let eventsW;
    let selectedCarpool = null;
    let eventsW2 = [];
    let datarray = [];
    let routeType;
    let arr = [];

    //get from mongo carpools db
    var request = new Request("/api/carpools", {
      method: "GET",
      headers: new Headers({
        Accept: 'application/json',
        'Content-Type': 'application/json',
      })
    });
    fetch(request)
      .then((response) => response.json())
      .then((data) => {
        //store data
        userData1 = data;

        //checks if user has registered for event
        function checkIfRegistered(userData1) {


          for (var i = 0; i < userData1.length; i++) {
            carpoolPart = userData1[i].carpoolers.find((x) => x.email === "<%= email %>")
            if (carpoolPart != undefined) {
              carpoolPart = carpoolPart.email
            }
            if (carpoolPart == "<%= email %>") {
              carpooledEvent = eventsW2.find((x) => x._id === userData1[i].nameOfEvent)
              if (carpooledEvent != undefined) {
                carpooledEvents.push(carpooledEvent)
              }
            }
          }


          turnRegistered(carpooledEvents)
        }

        function turnRegistered(eventsToDisable) {

          for (var i = 0; i < eventsToDisable.length; i++) {

            console.log(document.getElementById(eventsToDisable[i]._id))
            document.getElementById(eventsToDisable[i]._id).disabled = true;
            document.getElementById(eventsToDisable[i]._id).innerHTML = "Registered for this event"
          }
        }

        function getDayOfWeek(string) {
          const d = new Date(string);
          const dayOfWeek = d.getDay();

          // Example: Get the name of the weekday (not just a number)
          const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
          const currentDay = weekdays[dayOfWeek];
          return (currentDay)
        }

        function formatDate(date) {
          const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
          const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
          var date = new Date(date);

          const day = weekdays[date.getDay()];
          const month = date.getMonth();
          const year = date.getFullYear();
          return `${day}, ${months[month + 1]} ${date.getDate()}, ${year}`;
        }

        function sendData(data) {
          datarray.push(data);
          console.log(data);
        }

        function isFuture(dateStr) {
          const now = new Date();
          const d = new Date(dateStr);
          return d > now;
        }

        var request = new Request("/api/events", {
          method: "GET",
          headers: new Headers({
            Accept: 'application/json',
            'Content-Type': 'application/json',
          })
        });
        fetch(request)
          .then((response) => response.json())
          .then((data) => {

            eventsW = data.filter(e => isFuture(e.date));
            console.log(eventsW);
            eventsW2 = sortJSON(eventsW, 'date', '123');
            console.log(eventsW2);


            console.log("length:" + eventsW2.length)
            for (var i = 0; i < eventsW2.length; i++) {
              var obj = eventsW2[i];
              var date = formatDate(obj["date"]);
              var time = new Date(obj["date"]).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true });


              document.getElementById("eventsJS").innerHTML += `<article class="panel is-link has-text-centered" style=" margin-top: 10px;" >
         <div style="float: left; margin: 7px; left:0px; position: absolute " class="booker" >
          <span class="panel-icon" style='color: white; display: inline'>
            <i class="fas fa-book" aria-hidden="true" style="margin: 13px; margin-left: 15px;"></i>
            <p style="color: white; display: inline; font-size: 15px; " >Booked by `+ obj["firstName"] + ` ` + obj["lastName"] + `</p>
          </span>
         </div>
         <p class="panel-heading link-heading" style="margin-top: -10px;background: linear-gradient(105deg, #3273DC, #275CBF); " >

         `+ obj["eventName"] + `


         </p>


         <div class="panel-block">
          <p class="control has-icons-left" style="width: 100px;">

            <span style="color: #999999; margin-right: 5px;"><i class="fa-solid fa-location-dot "></i></span>Location: `+ obj["wlocation"] + `<br class="extraspace" style='display: none; '>  <span id="clock"  style="color: #999999; margin-right: 5px; margin-left: 10px;"><i class="fa-solid fa-clock "></i></span> Date: ` + date + `, ` + time + `
           </p>
          <div class="buttons upcoming-buttons" style="float: left; display: inline-block;">

          <button class="button js-modal-trigger" style="margin-right: 5px;" data-target="modal-js-example" id="`+ obj["_id"] + `_offer` + `" onclick=sendData('` + obj["_id"] + `')>Offer to carpool</button>

          <button class="button js-modal-trigger" data-target="modal-js-register" id="`+ obj["_id"] + `" onclick=sendData('` + obj["_id"] + `')>Join a carpool</button>
           </div>
           </div>




         </article>`;

            }
            checkIfRegistered(userData1)

            //sort events by date
            function sortJSON(arr, key, way) {
              return arr.sort(function (a, b) {
                var datex = a[key]; var datey = b[key];

                datex = new Date(datex)
                datey = new Date(datey)
                x = datex.getTime() / 1000
                y = datey.getTime() / 1000
                if (way === '123') { return ((x < y) ? -1 : ((x > y) ? 1 : 0)); }
                if (way === '321') { return ((x > y) ? -1 : ((x < y) ? 1 : 0)); }
              });
            }

            // eventsW2 = sortJSON(eventsW,'date', '123'); 
            // console.log("Sorted events: " + JSON.stringify(eventsW2));




            document.getElementById("filter").onchange = filter;
            function filter() {
              document.getElementById("eventsJS").innerHTML = ``
              for (var i = 0; i < eventsW.length; i++) {
                var obj = eventsW[i];
                var date = formatDate(obj["date"]);
                var time = new Date(obj["date"]).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true });
                if (document.getElementById("filter").value == "all") {
                  // `<div style="float: right; margin: 10px; width: 35px; height: 35px; background-color: hsl(348, 100%, 61%); border-radius: 5px
                  //    " <="" div=""></div>`
                  document.getElementById("eventsJS").innerHTML += `<article class="panel is-link has-text-centered" style=" margin-top: 10px;" >
                     <div style="float: left; margin: 7px; left:0px; position: absolute " class="booker" >
                       <span class="panel-icon" style='color: white; display: inline'>
                         <i class="fas fa-book" aria-hidden="true" style="margin: 13px; margin-left: 15px;"></i>
                         <p style="color: white; display: inline; font-size: 15px; " >Booked by `+ obj["firstName"] + ` ` + obj["lastName"] + `</p>
                       </span>
                     </div>
                     <p class="panel-heading link-heading" style="margin-top: -10px;background: linear-gradient(105deg, #3273DC, #275CBF); " >

                    `+ obj["eventName"] + `


                     </p>


                     <div class="panel-block">
                       <p class="control has-icons-left" style="width: 100px;">

                         <span style="color: #999999; margin-right: 5px;"><i class="fa-solid fa-location-dot "></i></span>Location: `+ obj["wlocation"] + `<br class="extraspace" style='display: none; '>  <span id="clock"  style="color: #999999; margin-right: 5px; margin-left: 10px;"><i class="fa-solid fa-clock "></i></span> Date: ` + date + `, ` + time + `
                        </p>
                       <div class="buttons upcoming-buttons" style="float: left; display: inline-block;">

                       <button class="button js-modal-trigger" style="margin-right: 5px;" data-target="modal-js-example" id="`+ obj["_id"] + `_offer` + `" onclick=sendData('` + obj["_id"] + `')>Offer to carpool</button>

                       <button class="button js-modal-trigger" data-target="modal-js-register" id="`+ obj["_id"] + `" onclick=sendData('` + obj["_id"] + `')>Join a carpool</button>
                        </div>
                        </div>




                    </article>`;
                }

                else if (document.getElementById("filter").value == obj["category"]) {
                  document.getElementById("eventsJS").innerHTML += `<article class="panel is-link has-text-centered" style=" margin-top: 10px;" >
                <div style="float: left; margin: 7px; left:0px; position: absolute " class="booker" >
                  <span class="panel-icon" style='color: white; display: inline'>
                    <i class="fas fa-book" aria-hidden="true" style="margin: 13px; margin-left: 15px;"></i>
                    <p style="color: white; display: inline; font-size: 15px; " >Booked by `+ obj["firstName"] + ` ` + obj["lastName"] + `</p>
                  </span>
                </div>
                <p class="panel-heading link-heading" style="margin-top: -10px;background: linear-gradient(105deg, #3273DC, #275CBF); " >

               `+ obj["eventName"] + `


                </p>


                <div class="panel-block">
                  <p class="control has-icons-left" style="width: 100px;">

                    <span style="color: #999999; margin-right: 5px;"><i class="fa-solid fa-location-dot "></i></span>Location: `+ obj["wlocation"] + `<br class="extraspace" style='display: none; '>  <span id="clock"  style="color: #999999; margin-right: 5px; margin-left: 10px;"><i class="fa-solid fa-clock "></i></span> Date: ` + date + `, ` + time + `
                   </p>
                  <div class="buttons upcoming-buttons" style="float: left; display: inline-block;">

                  <button class="button js-modal-trigger" style="margin-right: 5px;" data-target="modal-js-example" id="`+ obj["_id"] + `_offer` + `" onclick=sendData('` + obj["_id"] + `')>Offer to carpool</button>

                  <button class="button js-modal-trigger" data-target="modal-js-register" id="`+ obj["_id"] + `" onclick=sendData('` + obj["_id"] + `')>Join a carpool</button>
                   </div>
                   </div>




               </article>`;
                }

              }

              checkIfRegistered(userData1)
              modalFunctions()
            }


            function modalFunctions() {


              function openModal($el) {
                $el.classList.add('is-active');






                document.getElementById("registerJS").innerHTML = ``;

                //checks if the carpools id matches an events id

                for (var i = 0; i < eventsW2.length; i++) {
                  if (eventsW2[i]._id == datarray[datarray.length - 1]) {
                    eventTime = new Date(eventsW2[i].date);

                    let dayOfWeek = eventTime.getDay();
                    const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                    let day = weekdays[dayOfWeek];

                    eventTime = eventTime.toLocaleTimeString([], { hour: 'numeric', minute: 'numeric' });
                    console.log(eventTime)


                    document.getElementById("registerTitle").innerText = "Choose a carpool · " + day + " at " + eventTime
                  }
                }


                for (var i = 0; i < userData1.length; i++) {
                  var obj = userData1[i];

                  if (obj["nameOfEvent"] == datarray[datarray.length - 1]) {



                    //datarray[datarray.length - 1]



                    if (obj["route"] == "route") {
                      routeType = "Riders' Homes"
                    }
                    else if (obj["route"] == "point") {
                      routeType = "Common meeting point"
                    }

                    document.getElementById("registerJS").innerHTML +=
                      `<div class="notification"  style="padding: 10px;   margin-bottom: 10px;">
                                                      <div class="button  selectCarpool" style=" margin-left: 10px; margin-top: 4px; background-color: transparent; float: right" onclick=" selectCarpool(this)" id="` + obj["_id"] + `">Select</div>
                                                              <div style="float: right; margin-top: 3px;"  >` + obj["carpoolers"].length + `/` + obj["seats"] + ` signed up</div>
                                                                                        Organizer: <a style="color: #3273dc" href="mailto:` + obj["email"] + `">` + obj["email"] + `</a>
                                                                <br> Driver name: ` + obj["firstName"] + ` ` + obj["lastName"] + `
                                                                <br> Phone: ` + obj["phone"] + `
                                                                <br> Car: ` + obj["carMake"] + `
                                                                <br> Route type: ` + routeType + `
                                                                <br> Arrival time: ` + obj["arrivalTime"] + `
                       <br>                                                                                          </div>   `
                  }
                }

                if (value2 != "none" && value2 != null && value2 != false) {
                  document.getElementById("address-input").value = value2;
                  document.getElementById("address-input2").value = value2;
                }
              }

              function closeModal($el) {
                $el.classList.remove('is-active');
              }

              function closeAllModals() {
                (document.querySelectorAll('.modal') || []).forEach(($modal) => {
                  closeModal($modal);
                });
              }

              // Add a click event on buttons to open a specific modal
              (document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
                const modal = $trigger.dataset.target;
                const $target = document.getElementById(modal);

                $trigger.addEventListener('click', () => {
                  openModal($target);
                });
              });

              // Add a click event on various child elements to close the parent modal
              (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .cancel') || []).forEach(($close) => {
                const $target = $close.closest('.modal');

                $close.addEventListener('click', () => {
                  closeModal($target);
                });
              });

              // Add a keyboard event to close all modals
              document.addEventListener('keydown', (event) => {
                const e = event || window.event;

                if (e.keyCode === 27) { // Escape key
                  closeAllModals();
                }
              });

            }
            modalFunctions()

          })
          .catch((error) => {
            console.error(error);
          });

        /* 
        The addressAutocomplete takes as parameters:
        - a container element (div)
        - callback to notify about address selection
        - geocoder options:
        - placeholder - placeholder text for an input element
        - type - location type
        */





        document.body.onmousedown = function () {
          if (document.getElementById('address-input') != null) {
            document.getElementById("autocomplete-container").classList.remove("is-loading");
            document.getElementById("autocomplete-container2").classList.remove("is-loading");
          }

        }



        function addressAutocomplete(containerElement, idName, callback, options) {
          // create input element
          var inputElement = document.createElement("input");
          inputElement.setAttribute("type", "text");
          inputElement.setAttribute("placeholder", options.placeholder);
          inputElement.setAttribute("id", idName);
          inputElement.classList.add("input");
          containerElement.appendChild(inputElement);



          // add input field clear button
          var clearButton = document.createElement("div");
          clearButton.classList.add("clear-button");
          addIcon(clearButton);
          clearButton.addEventListener("click", (e) => {
            e.stopPropagation();
            inputElement.value = '';
            callback(null);
            clearButton.classList.remove("visible");
            closeDropDownList();
          });
          containerElement.appendChild(clearButton);

          /* Current autocomplete items data (GeoJSON.Feature) */
          var currentItems;

          /* Active request promise reject function. To be able to cancel the promise when a new request comes */
          var currentPromiseReject;

          /* Focused item in the autocomplete list. This variable is used to navigate with buttons */
          var focusedItemIndex;

          /* Execute a function when someone writes in the text field: */
          inputElement.addEventListener("input", function (e) {
            var currentValue = this.value;

            document.getElementById("autocomplete-container").classList.add("is-loading");
            document.getElementById("autocomplete-container2").classList.add("is-loading");

            /* Close any already open dropdown list */
            closeDropDownList();

            // Cancel previous request promise
            if (currentPromiseReject) {
              currentPromiseReject({
                canceled: true
              });
            }

            if (!currentValue) {
              clearButton.classList.remove("visible");
              return false;
            }

            // Show clearButton when there is a text
            clearButton.classList.add("visible");

            /* Create a new promise and send geocoding request */
            var promise = new Promise((resolve, reject) => {
              currentPromiseReject = reject;

              // TODO: Fix this
              var apiKey = "992ef3d60d434f2283ea8c6d70a4898d";
              var url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(currentValue)}&limit=5&apiKey=${apiKey}`;

              if (options.type) {
                url += `&type=${options.type}`;
              }

              fetch(url)
                .then(response => {
                  // check if the call was successful
                  if (response.ok) {
                    response.json().then(data => resolve(data));

                  } else {
                    response.json().then(data => reject(data));
                  }
                });
            });

            promise.then((data) => {
              document.getElementById("autocomplete-container").classList.remove("is-loading");
              document.getElementById("autocomplete-container2").classList.remove("is-loading");
              currentItems = data.features;

              /*create a DIV element that will contain the items (values):*/
              var autocompleteItemsElement = document.createElement("div");
              autocompleteItemsElement.setAttribute("class", "autocomplete-items");
              containerElement.appendChild(autocompleteItemsElement);

              /* For each item in the results */
              data.features.forEach((feature, index) => {
                /* Create a DIV element for each element: */
                var itemElement = document.createElement("DIV");
                /* Set formatted address as item value */
                itemElement.innerHTML = feature.properties.formatted;
                itemElement.classList.add("hoverAddress");
                /* Set the value for the autocomplete text field and notify: */
                itemElement.addEventListener("click", function (e) {
                  inputElement.value = currentItems[index].properties.formatted;



                  callback(currentItems[index]);

                  /* Close the list of autocompleted values: */
                  closeDropDownList();
                });

                autocompleteItemsElement.appendChild(itemElement);
              });
            }, (err) => {
              if (!err.canceled) {
                console.log(err);
              }
            });
          });

          /* Add support for keyboard navigation */
          inputElement.addEventListener("keydown", function (e) {
            var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
            if (autocompleteItemsElement) {
              var itemElements = autocompleteItemsElement.getElementsByTagName("div");
              if (e.keyCode == 40) {
                e.preventDefault();
                /*If the arrow DOWN key is pressed, increase the focusedItemIndex variable:*/
                focusedItemIndex = focusedItemIndex !== itemElements.length - 1 ? focusedItemIndex + 1 : 0;
             /*and and make the current item more visible:*/-
                  setActive(itemElements, focusedItemIndex);
              } else if (e.keyCode == 38) {
                e.preventDefault();

                /*If the arrow UP key is pressed, decrease the focusedItemIndex variable:*/
                focusedItemIndex = focusedItemIndex !== 0 ? focusedItemIndex - 1 : focusedItemIndex = (itemElements.length - 1);
                /*and and make the current item more visible:*/
                setActive(itemElements, focusedItemIndex);
              } else if (e.keyCode == 13) {
                /* If the ENTER key is pressed and value as selected, close the list*/
                e.preventDefault();
                if (focusedItemIndex > -1) {
                  closeDropDownList();
                }
              }
            } else {
              if (e.keyCode == 40) {
                /* Open dropdown list again */
                var event = document.createEvent('Event');
                event.initEvent('input', true, true);
                inputElement.dispatchEvent(event);
              }
            }
          });

          function setActive(items, index) {
            if (!items || !items.length) return false;

            for (var i = 0; i < items.length; i++) {
              items[i].classList.remove("autocomplete-active");
            }

            /* Add class "autocomplete-active" to the active element*/
            items[index].classList.add("autocomplete-active");

            // Change input value and notify
            inputElement.value = currentItems[index].properties.formatted;
            callback(currentItems[index]);
          }

          function closeDropDownList() {
            var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
            if (autocompleteItemsElement) {
              containerElement.removeChild(autocompleteItemsElement);
            }

            focusedItemIndex = -1;
          }

          function addIcon(buttonElement) {
            var svgElement = document.createElementNS("", 'svg');
            svgElement.setAttribute('viewBox', "0 0 24 24");
            svgElement.setAttribute('height', "24");


          }

          /* Close the autocomplete dropdown when the document is clicked. 
          Skip, when a user clicks on the input field */
          document.addEventListener("click", function (e) {
            if (e.target !== inputElement) {
              closeDropDownList();
            } else if (!containerElement.querySelector(".autocomplete-items")) {
              // open dropdown list again
              var event = document.createEvent('Event');
              event.initEvent('input', true, true);
              inputElement.dispatchEvent(event);
            }
          });

        }

        addressAutocomplete(document.getElementById("autocomplete-container"), "address-input", (data) => {
          console.log("Selected option: ");
          console.log(data);
          console.log(data.properties.formatted);
          arr.push(data.properties.formatted);
        }, {

          placeholder: "Enter an address here"

        });

        addressAutocomplete(document.getElementById("autocomplete-container2"), "address-input2", (data) => {
          console.log("Selected option: ");
          console.log(data);
          console.log(data.properties.formatted);
          arr.push(data.properties.formatted);
        }, {

          placeholder: "Enter an address here"

        });




        // Code for the second function


        // var request = new Request("/api/carpools", {
        //    method: "GET",
        //    headers: new Headers({
        //      Accept: 'application/json',
        //      'Content-Type': 'application/json',
        //    })
        //  });
        //  fetch(request)
        //    .then((response) => response.json())
        //    .then((data) => {

        //      console.log(data)
        //    })
        //add first name + last name: address to the carpoolers list in correct carpool id (selectedCarpool) carpools database








        // Call the first function and then execute the second function using .then()




        // tell the embed parent frame the height of the content
        if (window.parent && window.parent.parent) {
          window.parent.parent.postMessage(["resultsFrame", {
            height: document.body.getBoundingClientRect().height,
            slug: "akzrtm26"
          }], "*")
        }

        // always overwrite window.name, in case users try to set it manually
        window.name = "result"






        var route_type = document.getElementById("route-type");
        var address_label = document.getElementById("address-label");

        function changeLabel() {
          if (route_type.value == "route") {
            address_label.innerText = "Your home address";
            document.getElementById("address-input").disabled = false;
            if (value2 != "none" && value2 != false) {
              document.getElementById("address-input").value = value2;
            }
          }
          else if (route_type.value == "point") {
            address_label.innerText = "Meeting point";
            document.getElementById("address-input").value = "";
            document.getElementById("address-input").disabled = false;
          }
          else if (route_type.value == "eps-campus") {
            address_label.innerText = "EPS Campus";
            document.getElementById("address-input").value = "10613 NE 38th Place, Kirkland, WA 98033";
            document.getElementById("address-input").disabled = true;
          }
        }

        route_type.onchange = changeLabel;
        changeLabel();




      })
      .catch((error) => {
        console.error(error)
      });

    function sendData(data) {
      datarray.push(data);
      console.log(data);
    }

    function offer(id) {
      let newArray = document.getElementById("address-input").value
      let DriverFName = document.getElementById("fname").value;
      let DriverLName = document.getElementById("lname").value;
      let DriverEmail = document.getElementById("email").value;
      let DriverPhone = document.getElementById("phone").value;
      let CarMake = document.getElementById("carmake").value;
      let Seats = document.getElementById("seats").value;
      let ArrivalTime = document.getElementById("arrivaltime").value;
      let route = document.getElementById("route-type").value;
      let Carpoolers = []

      console.log(newArray + " " + DriverFName + " " + DriverLName + " " + Seats);
      offerACar(DriverFName, DriverLName, DriverEmail, DriverPhone, CarMake, Seats, route, newArray, Carpoolers, datarray[datarray.length - 1], ArrivalTime);
    }


    function offerACar(firstName, lastName, email, phone, carMake, seats, route, wlocation, carpoolers, nameOfEvent, arrivalTime) {
      let userEmail = "<%= email %>"
      const newcarpools = {
        firstName,
        lastName,
        email,
        phone,
        carMake,
        seats,
        route,
        wlocation,
        carpoolers,
        nameOfEvent,
        userEmail,
        arrivalTime
      };
      console.log(newcarpools);

      const jsonData = JSON.stringify(newcarpools);
      const url = "/api/carpools";


      fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: jsonData,
      })
        .then((response) => {
          console.log(response);
          // Open verification checker
        })
        .catch((error) => console.error("Error:", error));
    }


    function selectCarpool(element) {
      if (element.classList[2] == 'is-focused') {
        unfocus();
        selectedCarpool = null;
        // Reset counter display
        const counterElement = element.parentElement.querySelector('div[style*="float: right; margin-top: 3px;"]');
        if (counterElement) {
          const carpool = userData1.find(c => c._id === element.id);
          if (carpool) {
            counterElement.innerText = carpool.carpoolers.length + '/' + carpool.seats + ' signed up';
          }
        }
      } else {
        unfocus();
        element.classList.add('is-focused');
        element.innerHTML = "Selected";
        selectedCarpool = element.id;

        // Update counter display
        const counterElement = element.parentElement.querySelector('div[style*="float: right; margin-top: 3px;"]');
        if (counterElement) {
          const carpool = userData1.find(c => c._id === element.id);
          if (carpool) {
            counterElement.innerText = (carpool.carpoolers.length + 1) + '/' + carpool.seats + ' signed up';
          }
        }
      }
    }

    function unfocus() {
      var selects = document.getElementsByClassName('selectCarpool')
      for (const element of selects) { // You can use `let` instead of `const` if you like
        element.classList.remove('is-focused');
        element.innerHTML = "Select"
      }
    }



    function joinCarpool() {
      let newArray = document.getElementById("address-input2").value
      var personName = "<%= firstName %> <%= lastName %>";
      var email = "<%= email %>";
      var carpoool;
      if (selectedCarpool != null) {
        for (var i = 0; i < userData1.length; i++) {
          carpoool = userData1[i]
          if (carpoool["_id"] == selectedCarpool) {
            carpoool["carpoolers"].push({
              "address": newArray,
              "carpool": selectedCarpool
            })

            const addNewMember = {
              address: newArray,
              carpool: selectedCarpool
            }

            console.log(carpoool)
            jsonData = JSON.stringify(addNewMember)

            url = "/api/joinCarpool"

            fetch(url, {
              method: 'POST',
              headers: {
                "Content-Type": "application/json",
              },
              body: jsonData,
            })
              .then((response) => {
                if (response.redirected) {
                  window.location.href = response.url;
                }
              })
          }
        }
      }
    }


    function closeAllModals() {
      (document.querySelectorAll('.modal') || []).forEach(($modal) => {
        closeModal($modal);
      });
    }
    function closeModal($el) {
      $el.classList.remove('is-active');
    }


    function createevent() {
      firstName = "<%= firstName %> "
      lastName = "<%= lastName %> "
      eventName = document.getElementById("ename").value
      wlocation = document.getElementById("elocation").value
      console.log(wlocation)
      dateb = document.getElementById("edate").value//hotdogs
      var components = dateb.split(/[-T:]/);

      address = document.getElementById("create_address").value

      // Create a new Date object
      var dateTimeObject = new Date(components[0], components[1] - 1, components[2], components[3], components[4]);
      // Format the Date object as a string in the desired format
      date = dateTimeObject.toLocaleString('en-US', {
        month: 'numeric',
        day: 'numeric',
        year: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
      });
      category = document.getElementById("ecategory").value
      const data = {
        eventName,
        wlocation,
        date,
        category,
        addressToPut: address
      };
      console.log(data);

      const jsonData = JSON.stringify(data);

      const url = "/api/events";


      fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: jsonData,
      })
        .then((response) => {
          console.log(response);
          // Open verification checker
        })
        .catch((error) => console.error("Error:", error));
    }


  </script>
  <script>
    document.getElementById("eventsJS").innerHTML +=
      '';

    function myTimer(i) {
      let control = document.getElementsByClassName("control");
      for (let i = 0; i < control.length; i++) {

        control[i].style.color = "white"
      }
      let button = document.getElementsByClassName("button");
      for (let i = 0; i < button.length; i++) {
        button[i].style.color = "#ffffff";
        button[i].style.background = "#3c3c3c";
        button[i].style.border = "#bcae98";
      }
      clearInterval(myTimer);
    }
  </script>
  <script defer>
    function navBurger() {
      var burger = document.getElementById('nav-toggle');
      var menu = document.getElementById('navbarMenuHeroC');
      burger.addEventListener('click', function () {
        burger.classList.toggle('is-active');
        menu.classList.toggle('is-active');
      });
    }
    navBurger()


  </script>
  <div class="modal" id="disclaimer-modal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <section class="modal-card-body">
        <p class="has-text-centered is-size-5">This is an app maintained by Eastside Prep's Hack Club, a group of Upper
          School students that meet every Thursday at 11:05 pm in TMAC-007. Please email Hack Club Co-President Anmol
          Singh Josan, ajosan@eastsideprep.org, if you have any questions.</p>
        <br>
        <p class="has-text-centered is-size-5">Eastside Preparatory School does not mandate or encourage the use of this
          application. They do not claim any responsibility for the maintenance, upkeep, and development of this
          application. This is entirely student-run.</p>
        <br>
        <p class="has-text-centered is-size-5">All credit goes to the original development team: Anmol, Ari, Nikhil,
          Praneel, and Angad.</p>
      </section>
      <footer class="modal-card-foot">
        <button class="button is-info" onclick="closeDisclaimer()">Close</button>
      </footer>
    </div>
  </div>
  <script>
    function showDisclaimer() {
      document.getElementById('disclaimer-modal').classList.add('is-active');
    }

    function closeDisclaimer() {
      document.getElementById('disclaimer-modal').classList.remove('is-active');
    }
  </script>
</body>

</html>
