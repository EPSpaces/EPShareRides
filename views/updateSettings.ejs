<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>EPShare Rides</title>
  <link href="./bulma.min.css" rel="stylesheet" type="text/css" />
  <link href="./style.css" rel="stylesheet" type="text/css" />
  <script src="https://kit.fontawesome.com/16ae8e710d.js" crossorigin="anonymous"></script>
  <link rel="icon" href="favicon.png" type="image/x-icon">
  <meta charset="UTF-8">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
  <main>
    <section class="hero is-fullheight" id="hero">
      <div class="hero-head">
        <header class="navbar">
          <div class="container">
            <div class="navbar-brand">
              <a class="navbar-item">
                <img src="EPS Logo - Transparent-4.png" alt="Logo">
                <h1 class="title is-3" style="margin-left: 10px">EPShare Rides</h1>
              </a>
              <div class="navbar-item" style="padding: 0.5rem 0.75rem;">
                <button class="button is-info is-light" onclick="showDisclaimer()">
                  <span class="icon">
                    <i class="fas fa-info-circle"></i>
                  </span>
                </button>
              </div>
              <span class="navbar-burger" data-target="navbarMenuHeroC" id="nav-toggle">
                <span></span>
                <span></span>
                <span></span>
              </span>
            </div>
            <div id="navbarMenuHeroC" class="navbar-menu ">
              <div class="navbar-end">
                <div class="is-button is-link">
                  <div class="navbar-item">
                    <span style="font-size: 1em; color: #30B700; float: right">
                      <a class="fa-solid fa-leaf" href="/sustainabilityStatement" style="color: #30B700"></a>
                    </span>
                    <div class="buttons" style="margin: 10px;margin-right: 0px;">
                      <a class="button is-link is-outlined " href="/logout">
                        Log out
                      </a>
                      <div class="navbar-item has-dropdown is-hoverable "
                        onclick="document.getElementById('navbar-dropdown').style.visibility = 'visible';">
                        <a class="button is-link" id="name_button"
                          style="background: linear-gradient(105deg, #3273DC, #275CBF);">
                          <%= firstName %>
                            <%= lastName %>
                              <i style="margin-left: 5px;" class="fas fa-angle-down" aria-hidden="true"></i>
                        </a>
                        <div id="filler"
                          style="width: 130px; background-color: transparent; height: 20px; position: absolute; margin-top: -15px;">
                        </div>
                        <div class="navbar-dropdown" id="navbar-dropdown">
                          <a class="navbar-item" href="/updateSettings">
                            Update settings
                          </a>
                          <a class="navbar-item" href="https://forms.office.com/r/deCSjA7bCR">
                            Report a bug
                          </a>
                          <a class="navbar-item" href="/sustainabilityStatement">
                            Sustainability statement
                          </a>
                          <hr class="navbar-divider">
                          <div class="navbar-item">
                            Version Beta 0.1.0
                          </div>
                        </div>
                      </div>
                      </nav>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </header>
      </div>


      <section class="hero is-fullheight">
        <!-- Hero head: will stick at the top -->



        <!-- Hero content: will be in the middle -->
        <div class="hero-body" style="">
          <div class="container has-text-centered vertical-center" id="updatesettings">

            <h1 class="title is-3 " style="margin-top: 5px; margin-bottom: 30px">Settings</h1>

            <p class="subtitle is-6" style=" width: 100%; margin-bottom: 0px; text-align: left"><strong>Privacy</strong>
            </p>
            <div class="container" style="margin-top: 10px;margin-bottom: 30px">

              <p style="display: inline-block; font-size: 17px; transform: translate(0px,2px); float: left">Don't show
                my account to other EPS students</p>
              <input class="switch-input" type="checkbox" id="switch"><label class="switch-label"
                style="display: inline-block; margin-left: 5px; float:right" for="switch" checked="false">Toggle</label>
            </div>

            <div class="container" style="margin-bottom: 30px;margin-top: 10px">
              <p class="subtitle is-6" style=" width: 100%;  text-align: left; margin-bottom: 10px"><strong>Contact Information</strong></p>
              <div class="field" style="margin-bottom: 10px;">
                <input class="input" type="tel" id="phone" placeholder="Phone number">
              </div>
              <div class="field">
                <input class="input" type="email" id="email" placeholder="Email" value="<%= email %>" disabled>
              </div>
            </div>

            <div class="container" style="margin-bottom: 30px;margin-top: 10px">
              <p class="subtitle is-6" style=" width: 100%;  text-align: left; margin-bottom: 10px"><strong>Save my
                  address</strong></p>
              <div class="autocomplete-container" id="">
                <div class='control' id="autocomplete-container">
                </div>
              </div>

            </div>

            <div class="buttons">
              <div onclick="update()" class="button is-link"
                style="background: linear-gradient(105deg, #3273DC, #275CBF);">
                Update
              </div>
              <div class="button" onclick="window.location.href = '/'">
                Cancel
              </div>
            </div>
          </div>
        </div>
      </section>
  </main>

  <div class="modal" id="disclaimer-modal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <section class="modal-card-body">
        <p class="has-text-centered is-size-5">This is an app maintained by Eastside Prep's Hack Club, a group of Upper School students that meet every Thursday at 11:05 pm in TMAC-007. Please email Hack Club Co-President Anmol Singh Josan, ajosan@eastsideprep.org, if you have any questions.</p>
        <br>
        <p class="has-text-centered is-size-5">Eastside Preparatory School does not mandate or encourage the use of this application. They do not claim any responsibility for the maintenance, upkeep, and development of this application. This is entirely student-run.</p>
      </section>
      <footer class="modal-card-foot">
        <button class="button is-info" onclick="closeDisclaimer()">Close</button>
      </footer>
    </div>
  </div>
</body>
</html>
<script>

  let carpoools;
  let num;

  var request = new Request("/api/users", {
    method: "GET",
    headers: new Headers({
      Accept: 'application/json',
      'Content-Type': 'application/json',
    })
  });
  fetch(request)
    .then((response) => response.json())
    .then((data) => {
      carpoools = data;
      for (let k = 0; k < carpoools.length; k++) {
        if (carpoools[k].email === "<%= email %>") {
          if (carpoools[k].address != "none") {
            document.getElementById("address-input").value = carpoools[k].address;
          }
          if (carpoools[k].cell != "none") {
            document.getElementById("phone").value = carpoools[k].cell;
          }
          document.getElementById("switch").checked = carpoools[k].privacy;
        }
        else {
          continue;
        }
      }
    })

  /* 
  The addressAutocomplete takes as parameters:
  - a container element (div)
  - callback to notify about address selection
  - geocoder options:
  - placeholder - placeholder text for an input element
  - type - location type
  */

  function navBurger() {
    var burger = document.getElementById('nav-toggle');
    var menu = document.getElementById('navbarMenuHeroC');
    burger.addEventListener('click', function () {
      burger.classList.toggle('is-active');
      menu.classList.toggle('is-active');
    });
  }
  navBurger()



  document.body.onmousedown = function () {
    if (document.getElementById('address-input') != null) {
      document.getElementById("autocomplete-container").classList.remove("is-loading");
    }
  }



  function addressAutocomplete(containerElement, idName, callback, options) {
    // create input element
    var inputElement = document.createElement("input");
    inputElement.setAttribute("type", "text");
    inputElement.setAttribute("placeholder", options.placeholder);
    inputElement.setAttribute("id", idName);
    inputElement.classList.add("input");
    containerElement.appendChild(inputElement);



    // add input field clear button
    var clearButton = document.createElement("div");
    clearButton.classList.add("clear-button");
    addIcon(clearButton);
    clearButton.addEventListener("click", (e) => {
      e.stopPropagation();
      inputElement.value = '';
      callback(null);
      clearButton.classList.remove("visible");
      closeDropDownList();
    });
    containerElement.appendChild(clearButton);

    /* Current autocomplete items data (GeoJSON.Feature) */
    var currentItems;

    /* Active request promise reject function. To be able to cancel the promise when a new request comes */
    var currentPromiseReject;

    /* Focused item in the autocomplete list. This variable is used to navigate with buttons */
    var focusedItemIndex;

    /* Execute a function when someone writes in the text field: */
    inputElement.addEventListener("input", function (e) {
      var currentValue = this.value;

      document.getElementById("autocomplete-container").classList.add("is-loading");


      /* Close any already open dropdown list */
      closeDropDownList();

      // Cancel previous request promise
      if (currentPromiseReject) {
        currentPromiseReject({
          canceled: true
        });
      }

      if (!currentValue) {
        clearButton.classList.remove("visible");
        return false;
      }

      // Show clearButton when there is a text
      clearButton.classList.add("visible");

      /* Create a new promise and send geocoding request */
      var promise = new Promise((resolve, reject) => {
        currentPromiseReject = reject;

        // Geoapify Key
        var apiKey = "992ef3d60d434f2283ea8c6d70a4898d";
        var url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(currentValue)}&limit=5&apiKey=${apiKey}`;

        if (options.type) {
          url += `&type=${options.type}`;
        }

        fetch(url)
          .then(response => {
            // check if the call was successful
            if (response.ok) {
              response.json().then(data => resolve(data));

            } else {
              response.json().then(data => reject(data));
            }
          });
      });

      promise.then((data) => {
        document.getElementById("autocomplete-container").classList.remove("is-loading");

        currentItems = data.features;

        /*create a DIV element that will contain the items (values):*/
        var autocompleteItemsElement = document.createElement("div");
        autocompleteItemsElement.setAttribute("class", "autocomplete-items");
        containerElement.appendChild(autocompleteItemsElement);

        /* For each item in the results */
        data.features.forEach((feature, index) => {
          /* Create a DIV element for each element: */
          var itemElement = document.createElement("DIV");
          /* Set formatted address as item value */
          itemElement.innerHTML = feature.properties.formatted;
          itemElement.classList.add("hoverAddress");
          /* Set the value for the autocomplete text field and notify: */
          itemElement.addEventListener("click", function (e) {
            inputElement.value = currentItems[index].properties.formatted;



            callback(currentItems[index]);

            /* Close the list of autocompleted values: */
            closeDropDownList();
          });

          autocompleteItemsElement.appendChild(itemElement);
        });
      }, (err) => {
        if (!err.canceled) {
          console.log(err);
        }
      });
    });

    /* Add support for keyboard navigation */
    inputElement.addEventListener("keydown", function (e) {
      var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
      if (autocompleteItemsElement) {
        var itemElements = autocompleteItemsElement.getElementsByTagName("div");
        if (e.keyCode == 40) {
          e.preventDefault();
          /*If the arrow DOWN key is pressed, increase the focusedItemIndex variable:*/
          focusedItemIndex = focusedItemIndex !== itemElements.length - 1 ? focusedItemIndex + 1 : 0;
     /*and and make the current item more visible:*/-
            setActive(itemElements, focusedItemIndex);
        } else if (e.keyCode == 38) {
          e.preventDefault();

          /*If the arrow UP key is pressed, decrease the focusedItemIndex variable:*/
          focusedItemIndex = focusedItemIndex !== 0 ? focusedItemIndex - 1 : focusedItemIndex = (itemElements.length - 1);
          /*and and make the current item more visible:*/
          setActive(itemElements, focusedItemIndex);
        } else if (e.keyCode == 13) {
          /* If the ENTER key is pressed and value as selected, close the list*/
          e.preventDefault();
          if (focusedItemIndex > -1) {
            closeDropDownList();
          }
        }
      } else {
        if (e.keyCode == 40) {
          /* Open dropdown list again */
          var event = document.createEvent('Event');
          event.initEvent('input', true, true);
          inputElement.dispatchEvent(event);
        }
      }
    });

    function setActive(items, index) {
      if (!items || !items.length) return false;

      for (var i = 0; i < items.length; i++) {
        items[i].classList.remove("autocomplete-active");
      }

      /* Add class "autocomplete-active" to the active element*/
      items[index].classList.add("autocomplete-active");

      // Change input value and notify
      inputElement.value = currentItems[index].properties.formatted;
      callback(currentItems[index]);
    }

    function closeDropDownList() {
      var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
      if (autocompleteItemsElement) {
        containerElement.removeChild(autocompleteItemsElement);
      }

      focusedItemIndex = -1;
    }

    function addIcon(buttonElement) {
      var svgElement = document.createElementNS("", 'svg');
      svgElement.setAttribute('viewBox', "0 0 24 24");
      svgElement.setAttribute('height', "24");


    }

    /* Close the autocomplete dropdown when the document is clicked. 
    Skip, when a user clicks on the input field */
    document.addEventListener("click", function (e) {
      if (e.target !== inputElement) {
        closeDropDownList();
      } else if (!containerElement.querySelector(".autocomplete-items")) {
        // open dropdown list again
        var event = document.createEvent('Event');
        event.initEvent('input', true, true);
        inputElement.dispatchEvent(event);
      }
    });

  }

  addressAutocomplete(document.getElementById("autocomplete-container"), "address-input", (data) => {
    console.log("Selected option: ");
    console.log(data);
    console.log(data.properties.formatted);
    arr.push(data.properties.formatted);
  }, {

    placeholder: "Enter an address here"

  });











  function update() {
    let privacy = document.getElementById("switch").checked;
    let address = document.getElementById("address-input").value;
    let phone = document.getElementById("phone").value;
    let _id;


    console.log(carpoools)

    if (address == "") {
      address = "none"
    }
    if (phone == "") {
      phone = "none"
    }

    console.log(privacy + " " + address + " " + phone);

    for (let j = 0; j < carpoools.length; j++) {
      console.log(carpoools[j].email)
      let value = carpoools[j].email;
      if (value == "<%= email %>") {
        _id = carpoools[j]._id;
        console.log(_id)
        break;
      }
    }

    console.log(_id + " " + address + " " + privacy + " " + phone)


    fetch(`/api/users/update`, {
      method: "PATCH",
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ _id: _id, address: address, privacy: privacy, cell: phone })
    })
      .then(response => {
        if (response.ok) {
          console.log('Successfully updated the item.');
          window.location.replace("/");
        } else {
          console.log('Failed to update the item.');
        }
      })
      .catch(error => {
        console.error('A network error occurred:', error);
        alert('A network error occurred. Please try again later.');
      });
  }

  function showDisclaimer() {
    document.getElementById('disclaimer-modal').classList.add('is-active');
  }

  function closeDisclaimer() {
    document.getElementById('disclaimer-modal').classList.remove('is-active');
  }
</script>
