<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>EPShare Rides</title>
    <link href="./bulma.min.css" rel="stylesheet" type="text/css" />
    <link href="./style.css" rel="stylesheet" type="text/css" />
    <script src="https://kit.fontawesome.com/16ae8e710d.js" crossorigin="anonymous"></script>
    <link rel="icon" href="./favicon.ico" type="image/x-icon">
  </head>
  <body>
    <main>

      <section class="hero is-fullheight">
        <!-- Hero head: will stick at the top -->
        <div class="hero-head">
          <header class="navbar">
            <div class="container">
              <div class="navbar-brand">
                <a class="navbar-item">
                  <img src="EPS Logo - Transparent-4.png" alt="Logo">
                  <h1 class="title is-3" style="margin-left: 10px" >EPShare Rides
                  </h1>
                </a>
                <span class="navbar-burger " data-target="navbarMenuHeroC" id="nav-toggle">
                  <span></span>
                  <span></span>
                  <span></span>
                </span>
              </div>
              <div id="navbarMenuHeroC" class="navbar-menu ">
                <div class="navbar-end">

                  <div class="is-button is-link">

                    <div class="navbar-item">
                      <span style="font-size: 1em; color: #30B700; float: right">
                        <i class="fa-solid fa-leaf"></i>
                      </span>
                      <div class="buttons" style="margin: 10px;margin-right: 0px;">

                        <a class="button is-link is-outlined " href="/logout">
                         Log out
                        </a>

                         <div class="navbar-item has-dropdown is-hoverable ">
                        <a class="button is-link" id="name_button">
                       <%= firstName %> <%= lastName %>
                        </a>




                             <div class="navbar-dropdown" >
                               <a class="navbar-item">
                                Update settings
                               </a>
                               <a class="navbar-item" href="mailto:nmahesh@eastsideprep.org; ayamashita@eastsideprep.org; pjain27@eastsideprep.org; ajosan@eastsideprep.org">
                                 Report a bug
                               </a>
                               <a class="navbar-item">
                                 Delete account
                               </a>
                               <hr class="navbar-divider">
                               <div class="navbar-item">
                                 Version Beta 0.1.0
                               </div>
                             </div>
                           </div>
                         </nav>

                      </div>
                    </div>

                    </div>
                </div>
              </div>
            </div>
          </header>
        </div>

        <!-- Hero content: will be in the middle -->
        <div class="hero-body">
        
          <div class="container has-text-centered">
            <!-- <p class="title">
              Title
            </p>
            <p class="subtitle">
              Subtitle
            </p> -->

        <div class="wrapper" style="margin-top:-30px; margin-bottom: 30px; ">
          <div class="container-calendar" >
              <div id="left" style="margin-right: 15px;">
                 <h1>Calendar</h1>
                  <div id="event-section">
                      <h3>Add Event</h3>
                    <input type="date" id="eventDate">
                    <input type="time" id="eventTime">
                      <input type="text"
                          id="eventTitle"
                          placeholder="Event Title">
                      <input type="text"
                          id="eventDescription"
                          placeholder="Location">
                      <button id="addEvent" onclick="addEvent()">
                          Add
                      </button>
                  </div>
                  <div id="reminder-section">
                      <h3>Reminders</h3>
                      <!-- List to display reminders -->
                    <div  type="button" style="font-size: 15px; margin-top: 10px; background-color: #eee; border-radius: 0px; padding-top: 5px; padding-bottom: 5px;" class="collapsible" id="collapsible1">My carpools<i style="margin-left: 5px;" class="fa-solid fa-angle-right" id="carpools-caret"></i></div>
                    <div class="content" style="display: none;">


                      <ul id="reminderList">

                          <li data-event-id="1">
                              <strong>Event Title</strong>
                              - Event Description on Event Date
                              <button class="delete-event"
                                  onclick="deleteEvent(1)">
                                  Delete
                              </button>
                          </li>
                      </ul>
                       </div>
                  </div>
              </div>
              <div id="right">
                  <h3 id="monthAndYear"></h3>
                  <div class="button-container-calendar">
                      <button id="previous"
                              onclick="previous()">
                            ‹
                        </button>
                      <button id="next"
                              onclick="next()">
                            ›
                        </button>
                  </div>
                  <table class="table-calendar"
                         id="calendar"
                         data-lang="en">
                      <thead id="thead-month"></thead>
                      <!-- Table body for displaying the calendar -->
                      <tbody id="calendar-body"></tbody>
                  </table>
                  <div class="footer-container-calendar">
                      <label for="month">Jump To: </label>
                      <!-- Dropdowns to select a specific month and year -->
                      <select id="month" onchange="jump()">
                          <option value=0>Jan</option>
                          <option value=1>Feb</option>
                          <option value=2>Mar</option>
                          <option value=3>Apr</option>
                          <option value=4>May</option>
                          <option value=5>Jun</option>
                          <option value=6>Jul</option>
                          <option value=7>Aug</option>
                          <option value=8>Sep</option>
                          <option value=9>Oct</option>
                          <option value=10>Nov</option>
                          <option value=11>Dec</option>
                      </select>
                      <!-- Dropdown to select a specific year -->
                      <select id="year" onchange="jump()"></select>
                  </div>
              </div>
          </div>
        </div>
            </div>
            </div>
        <!-- Include the JavaScript file for the calendar functionality -->
        <script src="./script.js"></script>
        <!-- Hero footer: will stick at the bottom -->
        <div class="hero-foot" style="  ">
          <nav class="tabs is-boxed is-fullwidth">
            <div class="container">
              <ul>
                <li  class="is-active"><a href="/">My Carpools</a></li>
                <li ><a href="/upcomingevents">Upcoming Events</a></li>
                <li  ><a href="/friends">Friends</a></li>

              </ul>
            </div>
          </nav>
        </div>

      </section>

    </main>
  <!--<script src="index.js"></script>-->
  </body>
</html>
<script>
  // script.js
  // script.js
  let eventsP;
  fetch("/data/events", {
    method: "GET",
  })
    .then((response) => response.json())
    .then((data) => {
      eventsP = data;
      console.log(eventsP);
      displayReminders();
    })
    .catch((error) => console.log(error("Error:", error)));


  // Define an array to store events
  let events = [];

  // letiables to store event input fields and reminder list
  let eventDateInput = document.getElementById("eventDate");
  let eventTimeInput = document.getElementById("eventTime");
  let eventTitleInput = document.getElementById("eventTitle");
  let eventDescriptionInput = document.getElementById("eventDescription");
  let reminderList = document.getElementById("reminderList");

  // Counter to generate unique event IDs
  let eventIdCounter = 1;




  // Function to add events
  function addEvent() {
    let date = eventDateInput.value;
    let time = eventTimeInput.value;
    let title = eventTitleInput.value;
    let description = eventDescriptionInput.value;

    if (date && title) {
      // Create a unique event ID
      let eventId = eventIdCounter++;
      var hours = time.substring(0, 2);
      var minutes = time.substring(3, 5);
      if (hours > 12) {
        hours -= 12;

        time = hours + ":" + minutes + " PM";
      } else {
        time = time + " AM";
      }
      events.push({
        id: eventId,
        date: date,
        time: time,
        title: title,
        description: description,
      });

      const event = {
        id: eventId,
        date: date,
        time: time,
        title: title,
        description: description,
        email: "<%= email %>",
      };

      const url = "/event";

      const jsonData = JSON.stringify(event);

      fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: jsonData,
      })
        .then((response) => {
          if (response.redirected) {
            window.location.href = response.url;
          }
        })
        .catch((error) => console.log(error("Error:", error)));

      showCalendar(currentMonth, currentYear, time);
      eventDateInput.value = "";
      eventTimeInput.value = "";
      eventTitleInput.value = "";
      eventDescriptionInput.value = "";
      displayReminders();
    }
  }

  // Function to delete an event by ID
  function deleteEvent(eventId) {
    // Find the index of the event with the given ID
    let eventIndex = events.findIndex((event) => event.id === eventId);

    if (eventIndex !== -1) {
      // Remove the event from the events array
      events.splice(eventIndex, 1);
      showCalendar(currentMonth, currentYear);
      displayReminders();
    }
  }

  // Function to display reminders
  function displayReminders() {
    reminderList.innerHTML = "";
    for (let i = 0; i < eventsP.length; i++) {
      let event = eventsP[i];
      let eventDate = new Date(event.date);
      if (
        eventDate.getMonth() === currentMonth &&
        eventDate.getFullYear() === currentYear
      ) {
        let listItem = document.createElement("li");
        listItem.innerHTML = `<strong>${event.title}</strong> - 
              ${event.description} at ${event.time} on 
              ${eventDate.toLocaleDateString()} `;

        // Add a delete button for each reminder item
        let deleteButton = document.createElement("button");
        deleteButton.className = "delete-event";
        deleteButton.textContent = "Delete";
        deleteButton.onclick = function () {
          deleteEvent(event.id);
        };

        let seeButton = document.createElement("button");
        seeButton.className = "see-event";
        seeButton.textContent = "See who's registered";
        seeButton.onclick = function () {
          // seeButton function
        };

        listItem.appendChild(deleteButton);
        listItem.appendChild(seeButton);
        reminderList.appendChild(listItem);
      }
    }
  }

  // Function to generate a range of
  // years for the year select input
  function generate_year_range(start, end) {
    let years = "";
    for (let year = start; year <= end; year++) {
      years += "<option value='" + year + "'>" + year + "</option>";
    }
    return years;
  }

  // Initialize date-related letiables
  today = new Date();
  currentMonth = today.getMonth();
  currentYear = today.getFullYear();
  selectYear = document.getElementById("year");
  selectMonth = document.getElementById("month");

  createYear = generate_year_range(1970, 2050);

  document.getElementById("year").innerHTML = createYear;

  let calendar = document.getElementById("calendar");

  let months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  let days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

  $dataHead = "<tr>";
  for (dhead in days) {
    $dataHead += "<th data-days='" + days[dhead] + "'>" + days[dhead] + "</th>";
  }
  $dataHead += "</tr>";

  document.getElementById("thead-month").innerHTML = $dataHead;

  monthAndYear = document.getElementById("monthAndYear");
  showCalendar(currentMonth, currentYear);

  // Function to navigate to the next month
  function next() {
    currentYear = currentMonth === 11 ? currentYear + 1 : currentYear;
    currentMonth = (currentMonth + 1) % 12;
    showCalendar(currentMonth, currentYear);
  }

  // Function to navigate to the previous month
  function previous() {
    currentYear = currentMonth === 0 ? currentYear - 1 : currentYear;
    currentMonth = currentMonth === 0 ? 11 : currentMonth - 1;
    showCalendar(currentMonth, currentYear);
  }

  // Function to jump to a specific month and year
  function jump() {
    currentYear = parseInt(selectYear.value);
    currentMonth = parseInt(selectMonth.value);
    showCalendar(currentMonth, currentYear);
  }

  // Function to display the calendar
  function showCalendar(month, year) {
    let firstDay = new Date(year, month, 1).getDay();
    tbl = document.getElementById("calendar-body");
    tbl.innerHTML = "";
    monthAndYear.innerHTML = months[month] + " " + year;
    selectYear.value = year;
    selectMonth.value = month;

    let date = 1;
    for (let i = 0; i < 6; i++) {
      let row = document.createElement("tr");
      for (let j = 0; j < 7; j++) {
        if (i === 0 && j < firstDay) {
          cell = document.createElement("td");
          cellText = document.createTextNode("");
          cell.appendChild(cellText);
          row.appendChild(cell);
        } else if (date > daysInMonth(month, year)) {
          break;
        } else {
          cell = document.createElement("td");
          cell.setAttribute("data-date", date);
          cell.setAttribute("data-month", month + 1);
          cell.setAttribute("data-year", year);
          cell.setAttribute("data-month_name", months[month]);
          cell.className = "date-picker";
          cell.innerHTML = "<span>" + date + "</span";

          if (
            date === today.getDate() &&
            year === today.getFullYear() &&
            month === today.getMonth()
          ) {
            cell.className = "date-picker selected";
          }

          // Check if there are events on this date
          if (hasEventOnDate(date, month, year)) {
            cell.classList.add("event-marker");
            cell.appendChild(createEventTooltip(date, month, year, event.time));
          }

          row.appendChild(cell);
          date++;
        }
      }
      tbl.appendChild(row);
    }

    displayReminders();
  }

  // Function to create an event tooltip
  function createEventTooltip(date, month, year, time) {
    let tooltip = document.createElement("div");
    tooltip.className = "event-tooltip";
    let eventsOnDate = getEventsOnDate(date, month, year, time);
    for (let i = 0; i < eventsOnDate.length; i++) {
      let event = eventsOnDate[i];
      let eventDate = new Date(event.date);
      let eventText = `<strong>${event.title}</strong> - 
              ${event.description} at ${event.time} on 
              ${eventDate.toLocaleDateString()}`;
      let eventElement = document.createElement("p");
      eventElement.innerHTML = eventText;
      tooltip.appendChild(eventElement);
    }
    return tooltip;
  }

  // Function to get events on a specific date
  function getEventsOnDate(date, month, year, time) {
    return events.filter(function (event) {
      let eventDate = new Date(event.date);
      return (
        eventDate.getDate() === date &&
        eventDate.getMonth() === month &&
        eventDate.getFullYear() === year
      );
    });
  }

  // Function to check if there are events on a specific date
  function hasEventOnDate(date, month, year) {
    return getEventsOnDate(date, month, year).length > 0;
  }

  // Function to get the number of days in a month
  function daysInMonth(iMonth, iYear) {
    return 32 - new Date(iYear, iMonth, 32).getDate();
  }

  // Call the showCalendar function initially to display the calendar
  showCalendar(currentMonth, currentYear);





</script>
<script defer>
  function navBurger() {
      var burger = document.getElementById('nav-toggle');
      var menu = document.getElementById('navbarMenuHeroC');
      burger.addEventListener('click', function() {
          burger.classList.toggle('is-active');
          menu.classList.toggle('is-active');
      });
  }
  navBurger()


  var coll = document.getElementsByClassName("collapsible");
  var i;

  for (i = 0; i < coll.length; i++) {
    coll[i].addEventListener("click", function() {
      this.classList.toggle("active");
      var content = this.nextElementSibling;
      if (content.style.display === "block") {
        content.style.display = "none";
        document.getElementById("carpools-caret").classList="fa-solid fa-angle-right";
      } else {
        content.style.display = "block";
        document.getElementById("carpools-caret").classList="fa-solid fa-angle-down";
      }
    });
  }
</script>